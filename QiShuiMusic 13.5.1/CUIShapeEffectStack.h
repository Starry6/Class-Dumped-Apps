@interface CUIShapeEffectStack : NSObject
@property (nonatomic) float shapeOpacity;
@property (nonatomic) float outputOpacity;
@property (nonatomic) Q hueSaturationCount;
@property (nonatomic) ^{?=fffffBB} hueSaturation;
@property (nonatomic) Q colorOverlayCount;
@property (nonatomic) ^{?=IffffB} colorOverlay;
@property (nonatomic) Q innerGradientCount;
@property (nonatomic) ^{?=Ifffffff} innerGradient;
@property (nonatomic) Q innerGlowCount;
@property (nonatomic) ^{?=Ifffff} innerGlow;
@property (nonatomic) Q innerShadowCount;
@property (nonatomic) ^{?=Ifffffff{CGPoint=dd}} innerShadow;
@property (nonatomic) Q outerGlowCount;
@property (nonatomic) ^{?=ffffff} outerGlow;
@property (nonatomic) Q engraveShadowCount;
@property (nonatomic) ^{?=ffffffff{CGPoint=dd}} engraveShadow;
@property (nonatomic) Q extraShadowCount;
@property (nonatomic) ^{?=ffffffff{CGPoint=dd}} extraShadow;
@property (nonatomic) Q bevelEmbossCount;
@property (nonatomic) ^{?=ffffffffffffI} emboss;
@property (nonatomic) float scalefactor;
@property (nonatomic) NSInteger renderStrategy;
@property (nonatomic) I outputBlendMode;
- (id)cacheKey;
- (void)dealloc;
- (id)effectPreset;
- (id)initWithEffectPreset:;
- (void)_cleanupEffectSettings;
- (void)_setShapeOpacityFromPreset:atIndex:;
- (void)_setOutputOpacityFromPreset:atIndex:;
- (void)_setColorFillAtIndex:FromPreset:index:;
- (BOOL)hasColorOverlay;
- (float)colorOverlayOpacity;
- (void)_setInteriorGradientAtIndex:fromPreset:index:;
- (BOOL)hasInnerGradient;
- (float)innerGradientOpacity;
- (void)_setInnerGlowAtIndex:fromPreset:index:;
- (BOOL)hasInnerGlow;
- (void)_setInnerShadowAtIndex:fromPreset:index:;
- (BOOL)hasInnerShadow;
- (void)_setOuterGlowAtIndex:fromPreset:index:;
- (BOOL)hasOuterGlow;
- (void)_setEngraveShadowAtIndex:fromPreset:index:;
- (BOOL)hasEngraveShadow;
- (void)_setExtraShadowAtIndex:fromPreset:index:;
- (BOOL)hasExtraShadow;
- (void)_setBevelEmbossAtIndex:fromPreset:index:;
- (BOOL)hasBevelEmboss;
- (BOOL)hasEffects;
- (void)_setHueSaturationAtIndex:fromPreset:index:;
- (BOOL)hasHueSaturation;
- (BOOL)_precompositeColorOverlayInnerGradient;
- (void)_updateRenderStrategyFromEffect:;
- (id)imageWithSingleBlurShapeEffectOfImage:withInteriorFill:;
- (id)imageWithInnerGlowOfImage:effect:;
- (id)imageWithInnerShadowOfImage:effect:;
- (id)image:withAdjustedOpacity:;
- (id)imageWithColorOverlayOfImage:effect:;
- (id)imageWithHueSaturationOfImage:effect:;
- (id)imageWithInteriorGradientFillOfImage:effect:;
- (id)imageWithOuterGlowOfImage:effect:;
- (id)imageWithEngraveShadowOfImage:effect:;
- (id)imageWithExtraShadowOfImage:effect:;
- (id)imageWithBevelEmbossOfImage:effect:;
- (int)cgBlendModeForOutputBlending;
- (void)updateOutputBlendingWithInteriorFillHeuristic;
- (void)scaleEffectParametersBy:;
- (void)_normalizeEffectParameters;
- (BOOL)anyEffectAllowsTintSubstitution;
- (void)applyCustomForegroundColor:;
- (void)applyCustomForegroundColor:tintEffectColors:;
- (void)scaleBrightnessOfEffectColorsByAmount:onlyTintableColors:;
- (void)adjustEffectColorsToTemperature:onlyTintableColors:;
- (id)standardEffectCompositeWithShapeImage:blendOntoImage:;
- (id)optimizedSingleBlurEffectCompositeWithShapeImage:;
- (id)compositeEffectStackWithShapeImage:withScale:blendOntoImage:;
- (id)effectPaddingWithScale:;
- (id)effectInsetsWithScale:;
- (id)processedImageFromImage:;
- (id)processedImageFromImage:withScale:;
- (id)processedImageFromShapeImage:;
- (id)processedImageFromShapeImage:withScale:;
- (id)processedImageFromShapeImage:withScale:invertShadows:;
- (id)newFlattenedImageFromShapeCGImage:withScale:;
- (id)newFlattenedImageFromShapeCGImage:withScale:cache:;
- (id)_newFlattenedImageFromShapeCGImage:withScale:ciContext:blendOverImage:;
- (id)newFlattenedImageFromShapeCGImage:withScale:ciContext:;
- (id)newFlattenedImageFromCGImage:withScale:ciContext:;
- (id)newFlattenedImageFromShapeCGImage:;
- (id)processedImageFromShapePath:inRect:;
- (id)newColorByProcessingColor:;
- (BOOL)expressableByColorFillCheckingOutputBlending:;
- (void)setBypassColorFills:;
- (unsigned int)outputBlendMode;
- (float)shapeOpacity;
- (float)outputOpacity;
- (unsigned long long)hueSaturationCount;
- (id)hueSaturation;
- (unsigned long long)colorOverlayCount;
- (void)setColorOverlayCount:;
- (id)colorOverlay;
- (unsigned long long)innerGradientCount;
- (void)setInnerGradientCount:;
- (id)innerGradient;
- (unsigned long long)innerGlowCount;
- (void)setInnerGlowCount:;
- (id)innerGlow;
- (unsigned long long)innerShadowCount;
- (void)setInnerShadowCount:;
- (id)innerShadow;
- (unsigned long long)outerGlowCount;
- (id)outerGlow;
- (unsigned long long)engraveShadowCount;
- (void)setEngraveShadowCount:;
- (id)engraveShadow;
- (unsigned long long)extraShadowCount;
- (id)extraShadow;
- (unsigned long long)bevelEmbossCount;
- (id)emboss;
- (float)scalefactor;
- (int)renderStrategy;
+ (id)colorWithRed:green:blue:alpha:;
+ (id)sharedCIContext;
+ (id)preferredCIContextOptions;
+ (id)offset:by:;
+ (id)adjustOpacity:by:;
+ (id)pixelZoomed:scale:about:;
+ (id)unsharpMask:radius:intensity:;
+ (id)composite:over:;
+ (id)composite:into:;
+ (id)composite:outOf:;
+ (id)composite:atop:;
+ (id)blend:over:blendKind:;
+ (id)image:withOpacity:;
+ (id)invert:;
+ (id)blur:radius:;
+ (id)colorWithGray:alpha:;
+ (id)rectangle:withRed:green:blue:alpha:;
+ (id)gradientWithParameters:inRect:;
+ (id)shadowFrom:red:green:blue:opacity:;
+ (id)imageFromBlendWithMask:foreground:background:;
+ (id)innerGlowFrom:withRadius:red:green:blue:opacity:;
+ (id)innerShadowFrom:withOffset:radius:red:green:blue:opacity:;
+ (id)outerGlowFrom:withSize:spread:red:green:blue:opacity:;
+ (id)outerShadowFrom:withOffset:size:spread:red:green:blue:opacity:;
+ (id)bevelEmbossFrom:withSize:soften:angle:altitude:highlightRed:highlightGreen:highlightBlue:highlightOpacity:shadowRed:shadowGreen:shadowBlue:shadowOpacity:bevelStyle:;
+ (id)hueSaturationFrom:withCenterAngle:width:tintRed:tintGreen:tintBlue:;
+ (id)shapeEffectSingleBlurFrom:withInteriorFill:offset:blurSize:innerGlowRed:innerGlowGreen:innerGlowBlue:innerGlowOpacity:innerShadowRed:innerShadowGreen:innerShadowBlue:innerShadowOpacity:outerGlowRed:outerGlowGreen:outerGlowBlue:outerGlowOpacity:outerShadowRed:outerShadowGreen:outerShadowBlue:outerShadowOpacity:hasInsideShadowBlur:hasOutsideShadowBlur:;
+ (id)newColorByAdjustingLightnessOfColor:darker:;
@end
