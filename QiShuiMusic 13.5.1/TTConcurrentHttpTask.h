@interface TTConcurrentHttpTask : TTHttpTask
@property (nonatomic) TTNetworkManagerApiParameters outerApiParams;
@property (nonatomic) Q requestApiType;
@property (nonatomic) double connectTimeInterval;
@property (nonatomic) NSMutableArray concurrentHost;
@property (nonatomic) Q concurrentTaskId;
@property (nonatomic) NSString transactionId;
@property (nonatomic) NSDate firstTaskStartTime;
@property (nonatomic) Q subTaskSeqNumber;
@property (nonatomic) NSMutableDictionary subTaskSequenceDict;
@property (nonatomic) TTHttpTaskChromium winnerTask;
@property (nonatomic) Q resumedTaskCount;
@property (nonatomic) NSMutableSet sentHostSet;
@property (nonatomic) Q callbackedTaskCount;
@property (nonatomic) NSMutableDictionary callbackInfoDict;
@property (nonatomic) NSTimer timer;
@property (nonatomic) BOOL isCancelled;
@property (nonatomic) BOOL isCompleted;
@property (nonatomic) BOOL isRedirectionCallbackedToUser;
@property (nonatomic) q throttleSpeed;
@property (nonatomic) float taskPriority;
@property (nonatomic) UrlMatchRule matchRule;
@property (nonatomic) BOOL isMarkingWinnerWithBlockErrorCodeSet;
@property (nonatomic) NSMutableArray tasksInfo;
@property (nonatomic) double startTime;
@property (nonatomic) double endTime;
- (void)asyncStartTimer;
- (BOOL)enableHttpCache;
- (double)readDataTimeout;
- (BOOL)isStreamingTask;
- (void)setSentHostSet:;
- (id)addConcurrentAndIsRetryQueryIfNeed:originalQuery:;
- (void)addHeaderCallbackAndTimeoutSettings:subtaskNumber:;
- (void)addOtherSettingsForTask:;
- (void)addTimeoutSettingForTaskIfNotTimeout:;
- (void)addWrapperDataCallbackForTask:;
- (void)addWrapperHeaderCallbackForTask:taskNumber:;
- (void)addWrapperRedirectCallbackForTask:;
- (void)asyncStopTimer;
- (void)callbackCommonResultToUser:obj:response:;
- (void)callbackHeaderToUser:withResponse:;
- (id)callbackInfoDict;
- (unsigned long long)callbackedTaskCount;
- (id)concurrentHost;
- (unsigned long long)concurrentTaskId;
- (double)connectTimeInterval;
- (BOOL)doDispatchWithUrl:andDispatchInfo:;
- (id)firstTaskStartTime;
- (id)generateBinaryTask;
- (id)generateFinalConcurrentRequestLogInfo;
- (id)generateJSONTask;
- (id)generateNewRequestURLAndAddTaskCount;
- (void)generateSubtaskEndInfo:withResponse:taskSeqNumber:;
- (void)generateSubtaskStartInfo:startTimeInterval:;
- (id)generateWebviewTask;
- (id)getOneSubtask;
- (void)handleCallbackWithResponseError:withObject:withResponse:taskSeqNumber:;
- (void)handleWrapperHeaderCallback:withResponse:;
- (id)initWithRequestInterval:URLString:concurrentHost:requestModel:params:method:needCommonParams:headerField:enableHttpCache:verifyRequest:isCustomizedCookie:constructingBodyWithBlock:bodyField:filePath:offset:length:progress:requestSerializer:requestApiType:concurrentTaskId:transactionId:modelResponseSerializer:useJsonResponseSerializer:jsonResponseSerializer:binaryResponseSerializer:modelCallback:modelCallbackWithResponse:headerCallback:dataCallback:callback:callbackWithResponse:redirectCallback:dispatch_queue:destination:isAppend:progressCallback:completionHandler:timeout:redirectHeaderDataCallbackQueue:nsrequest:mainDocURL:matchRule:;
- (id)initWithRequestInterval:concurrentHost:URLString:params:method:needCommonParams:headerField:enableHttpCache:requestSerializer:requestApiType:concurrentTaskId:transactionId:responseSerializer:isCustomizedCookie:headerCallback:dataCallback:callback:callbackWithResponse:redirectCallback:progress:dispatch_queue:redirectHeaderDataCallbackQueue:matchRule:;
- (id)initWithRequestInterval:concurrentHost:URLString:params:method:needCommonParams:headerField:requestSerializer:requestApiType:concurrentTaskId:transactionId:responseSerializer:verifyRequest:isCustomizedCookie:callback:callbackWithResponse:dispatch_queue:matchRule:;
- (id)initWithRequestInterval:concurrentHost:requestApiType:concurrentTaskId:transactionId:nsrequest:mainDocURL:enableHttpCache:redirectCallback:headerCallback:dataCallback:callbackWithResponse:matchRule:;
- (BOOL)isAllResumedSubtaskCompleted;
- (BOOL)isCancelledByUser;
- (BOOL)isMarkingWinnerWithBlockErrorCodeSet;
- (BOOL)isProtectTimeoutReached:;
- (BOOL)isRedirectionCallbackedToUser;
- (BOOL)isTTNetworkTimeout:;
- (BOOL)isTreatingNon2xxResponseAsSuccess;
- (void)markWinnerAndCancelOtherTasks:accordingToError:;
- (void)markWinnerAndCancelTasksInternal:;
- (id)matchRule;
- (id)outerApiParams;
- (double)protectTimeout;
- (double)recvHeaderTimeout;
- (unsigned long long)requestApiType;
- (unsigned long long)resumedTaskCount;
- (void)runOnceInTimer;
- (id)sentHostSet;
- (void)setCallbackInfoDict:;
- (void)setCallbackedTaskCount:;
- (void)setConcurrentHost:;
- (void)setConcurrentTaskId:;
- (void)setConnectTimeInterval:;
- (void)setEnableHttpCache:;
- (void)setFirstTaskStartTime:;
- (void)setIsMarkingWinnerWithBlockErrorCodeSet:;
- (void)setIsRedirectionCallbackedToUser:;
- (void)setIsStreamingTask:;
- (void)setMatchRule:;
- (void)setOuterApiParams:;
- (void)setProtectTimeout:;
- (void)setReadDataTimeout:;
- (void)setRecvHeaderTimeout:;
- (void)setRequestApiType:;
- (void)setResumedTaskCount:;
- (void)setSkipSSLCertificateError:;
- (void)setSubTaskSeqNumber:;
- (void)setSubTaskSequenceDict:;
- (void)setTasksInfo:;
- (void)setThrottleNetSpeed:;
- (void)setThrottleSpeed:;
- (void)setWinnerTask:;
- (BOOL)skipSSLCertificateError;
- (void)startTimerInternalInMainThread;
- (void)stopTimerInternalInMainThread;
- (unsigned long long)subTaskSeqNumber;
- (id)subTaskSequenceDict;
- (void)syncStartTimer;
- (void)syncStopTimer;
- (id)tasksInfo;
- (long long)throttleSpeed;
- (void)updateMatchRuleInfo;
- (id)winnerTask;
- (void)cancel;
- (void)setPriority:;
- (void)readDataOfMinLength:maxLength:timeout:completionHandler:;
- (BOOL)isCancelled;
- (void)setStartTime:;
- (void)setEndTime:;
- (void)suspend;
- (double)startTime;
- (void)setTimer:;
- (void)resume;
- (double)endTime;
- (double)timeoutInterval;
- (long long)state;
- (BOOL)isCompleted;
- (void)setIsCancelled:;
- (void).cxx_destruct;
- (id)timer;
- (void)setTimeoutInterval:;
- (id)transactionId;
- (void)setTransactionId:;
- (float)taskPriority;
- (void)setTaskPriority:;
- (void)setIsCompleted:;
- (void)restartTimer;
+ (id)buildBinaryConcurrentTask:params:method:needCommonParams:headerField:enableHttpCache:requestSerializer:responseSerializer:autoResume:isCustomizedCookie:headerCallback:dataCallback:callback:callbackWithResponse:redirectCallback:progress:dispatch_queue:redirectHeaderDataCallbackQueue:concurrentRequestConfig:;
+ (id)buildJSONConcurrentTask:params:method:needCommonParams:headerField:requestSerializer:responseSerializer:autoResume:verifyRequest:isCustomizedCookie:callback:callbackWithResponse:dispatch_queue:concurrentRequestConfig:;
+ (id)buildWebviewConcurrentTask:mainDocURL:autoResume:enableHttpCache:redirectCallback:headerCallback:dataCallback:callbackWithResponse:concurrentRequestConfig:;
+ (void)clearMatchRules:;
+ (id)constructRuleWithItem:hostGroup:equalGroup:prefixGroup:patternGroup:;
+ (BOOL)forbidConcurrentTaskIfNeed:;
+ (id)getConcurrentHostAccordingToRules:withUrl:;
+ (BOOL)isConservativeStrategyEnabled:;
+ (BOOL)isMatchingWithNoRetry:;
+ (void)lazyInitStaticRuleObj;
+ (double)parseConcurrentRequestConnectInterval:preferMatchRule:;
+ (id)parseConcurrentRequestMatchRules:;
+ (BOOL)parseIfConcurrentRequestSwitchEnabled:switchName:;
+ (void)updateFailCountAndForbiddenTime:;
@end
