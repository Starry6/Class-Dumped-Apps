@interface DATaskManager : NSObject
@property (nonatomic) NSMutableArray queuedExclusiveTasks;
@property (nonatomic) <DATask> activeExclusiveTask;
@property (nonatomic) NSMutableSet independentTasks;
@property (nonatomic) NSMutableSet heldIndependentTasks;
@property (nonatomic) NSMutableSet modalHeldIndependentTasks;
@property (nonatomic) NSMutableArray mQueuedTasks;
@property (nonatomic) <DATask> modalHeldActiveQueuedTask;
@property (nonatomic) <DATask> activeQueuedTask;
@property (nonatomic) NSMutableArray queuedModalTasks;
@property (nonatomic) <DATask> activeModalTask;
@property (nonatomic) NSInteger state;
@property (nonatomic) NSTimer managerIdleTimer;
@property (nonatomic) NSTimer userInitiatedSyncTimer;
@property (nonatomic) NSTimer xpcTransactionTimer;
@property (nonatomic) NSTimer powerLogIdleTimer;
@property (nonatomic) BOOL didLogSyncStart;
@property (nonatomic) DAAccount account;
@property (nonatomic) NSArray queuedTasks;
@property (nonatomic) NSArray allTasks;
@property (nonatomic) NSString powerAssertionGroupID;
- (id)account;
- (id)deviceType;
- (void)cancelTask:;
- (id)userAgent;
- (id)init;
- (id)password;
- (void)shutdown;
- (void)setAccount:;
- (void)dealloc;
- (id)accountID;
- (void)setState:;
- (id)server;
- (long long)port;
- (BOOL)isShutdown;
- (int)state;
- (id)user;
- (id)stateString;
- (void).cxx_destruct;
- (id)initWithAccount:;
- (id)allTasks;
- (id)_version;
- (void)cancelAllTasks;
- (BOOL)useSSL;
- (id)accountPersistentUUID;
- (id)identityPersist;
- (BOOL)shouldCancelTaskDueToOnPowerFetchMode;
- (void)_performTask:;
- (void)_startModal:;
- (void)_useOpportunisticSocketsAgain;
- (void)_clearUserInitiatedSyncTimer;
- (void)_endXpcTransaction;
- (void)_logSyncEnd;
- (id)queuedTasks;
- (void)_populateVersionDescriptions;
- (BOOL)_useFakeDescriptions;
- (id)OAuth2Token;
- (void)submitExclusiveTask:;
- (void)submitExclusiveTask:toFrontOfQueue:;
- (void)submitIndependentTask:;
- (void)submitQueuedTask:;
- (void)cancelTask:withUnderlyingError:;
- (void)cancelTasksDueToOnPowerMode;
- (id)_powerLogInfoDictionary;
- (BOOL)_taskForcesNetworking:;
- (BOOL)_taskInQueueForcesNetworkConnection:;
- (BOOL)_hasTasksForcingNetworkConnection;
- (BOOL)_hasTasksIndicatingARunningSync;
- (void)taskDidFinish:;
- (void)taskRequestModal:;
- (void)taskEndModal:;
- (BOOL)taskIsModal:;
- (void)_requestCancelTasksWithReason:;
- (void)_reactivateHeldTasks;
- (void)_makeStateTransition;
- (void)_scheduleSelector:withArgument:;
- (void)_schedulePerformTask:;
- (void)_scheduleStartModal:;
- (void)_cancelTasksWithReason:;
- (void)_retainPowerAssertionForTask:;
- (void)_releasePowerAssertionForTask:;
- (id)queuedExclusiveTasks;
- (id)independentTasks;
- (id)heldIndependentTasks;
- (id)modalHeldIndependentTasks;
- (id)mQueuedTasks;
- (id)queuedModalTasks;
- (void)taskManagerDidAddTask:;
- (void)taskManagerWillRemoveTask:;
- (id)activeModalTask;
- (void)setActiveModalTask:;
- (id)activeQueuedTask;
- (void)setActiveQueuedTask:;
- (id)powerAssertionGroupID;
- (void)setPowerAssertionGroupID:;
- (void)setQueuedExclusiveTasks:;
- (id)activeExclusiveTask;
- (void)setActiveExclusiveTask:;
- (void)setIndependentTasks:;
- (void)setHeldIndependentTasks:;
- (void)setModalHeldIndependentTasks:;
- (void)setMQueuedTasks:;
- (id)modalHeldActiveQueuedTask;
- (void)setModalHeldActiveQueuedTask:;
- (void)setQueuedModalTasks:;
- (id)managerIdleTimer;
- (void)setManagerIdleTimer:;
- (id)userInitiatedSyncTimer;
- (void)setUserInitiatedSyncTimer:;
- (id)xpcTransactionTimer;
- (void)setXpcTransactionTimer:;
- (id)powerLogIdleTimer;
- (void)setPowerLogIdleTimer:;
- (BOOL)didLogSyncStart;
- (void)setDidLogSyncStart:;
@end
