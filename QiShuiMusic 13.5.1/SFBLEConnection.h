@interface SFBLEConnection : NSObject
@property (nonatomic) BOOL bleEncrypted;
@property (nonatomic) BOOL latencyCritical;
@property (nonatomic) BOOL lePipeCapable;
@property (nonatomic) SFBLEDevice peerDevice;
@property (nonatomic) BOOL acceptor;
@property (nonatomic) @? bluetoothBandwidthChangedHandler;
@property (nonatomic) @? bluetoothStateChangedHandler;
@property (nonatomic) q connectionState;
@property (nonatomic) @? connectionStateChangedHandler;
@property (nonatomic) @? dataHandler;
@property (nonatomic) NSObject<OS_dispatch_queue> dispatchQueue;
@property (nonatomic) @? invalidationHandler;
@property (nonatomic) I sessionFlags;
@property (nonatomic) I useCase;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (long long)connectionState;
- (BOOL)removeClient:;
- (unsigned int)useCase;
- (void)addClient:;
- (void)dealloc;
- (void)nearbyDidChangeBluetoothBandwidthState:;
- (id)dispatchQueue;
- (id)bluetoothStateChangedHandler;
- (void)setUseCase:;
- (id)connectionStateChangedHandler;
- (void)setDispatchQueue:;
- (id)peerDevice;
- (void)setSessionFlags:;
- (void)setPeerDevice:;
- (void)nearby:didReceiveData:fromPeer:;
- (void)nearby:didDisconnectFromPeer:error:;
- (void)_invalidate;
- (void)setBluetoothStateChangedHandler:;
- (void)_activate;
- (void).cxx_destruct;
- (id)invalidationHandler;
- (void)setInvalidationHandler:;
- (id)description;
- (void)nearbyDidUpdateState:;
- (void)_connectIfNeeded;
- (unsigned int)sessionFlags;
- (void)setConnectionStateChangedHandler:;
- (id)dataHandler;
- (void)invalidate;
- (void)nearby:didSendData:toPeer:error:;
- (void)nearby:didConnectToPeer:transport:error:;
- (void)activate;
- (void)setDataHandler:;
- (id)initWithDevice:acceptor:;
- (void)setAcceptor:;
- (void)activateDirect;
- (void)sendData:completion:;
- (void)sendDataDirect:completion:;
- (void)_processQueuedData;
- (void)_cleanupQueuedData:;
- (BOOL)acceptor;
- (id)bluetoothBandwidthChangedHandler;
- (void)setBluetoothBandwidthChangedHandler:;
- (BOOL)bleEncrypted;
- (void)setBleEncrypted:;
- (BOOL)latencyCritical;
- (void)setLatencyCritical:;
- (BOOL)lePipeCapable;
- (void)setLePipeCapable:;
@end
