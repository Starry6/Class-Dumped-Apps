@interface CXCallUpdate : NSObject
@property (nonatomic) {os_unfair_lock_s=I} accessorLock;
@property (nonatomic) {CXCallUpdateHasSet=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1} hasSet;
@property (nonatomic) NSUUID UUID;
@property (nonatomic) CXParticipant activeRemoteParticipant;
@property (nonatomic) BOOL blocked;
@property (nonatomic) BOOL emergency;
@property (nonatomic) BOOL failureExpected;
@property (nonatomic) BOOL supportsEmergencyFallback;
@property (nonatomic) BOOL usingBaseband;
@property (nonatomic) BOOL mayRequireBreakBeforeMake;
@property (nonatomic) q ttyType;
@property (nonatomic) BOOL supportsTTYWithVoice;
@property (nonatomic) BOOL requiresInCallSounds;
@property (nonatomic) q inCallSoundRegion;
@property (nonatomic) NSString audioCategory;
@property (nonatomic) NSString audioMode;
@property (nonatomic) q audioInterruptionProvider;
@property (nonatomic) q audioInterruptionOperationMode;
@property (nonatomic) q verificationStatus;
@property (nonatomic) q priority;
@property (nonatomic) NSString crossDeviceIdentifier;
@property (nonatomic) CXAccount account;
@property (nonatomic) NSString announceProviderIdentifier;
@property (nonatomic) NSString ISOCountryCode;
@property (nonatomic) NSUUID localSenderIdentityUUID;
@property (nonatomic) NSUUID localSenderIdentityAccountUUID;
@property (nonatomic) NSUUID participantGroupUUID;
@property (nonatomic) NSSet remoteParticipantHandles;
@property (nonatomic) NSSet otherInvitedHandles;
@property (nonatomic) NSSet activeRemoteParticipantHandles;
@property (nonatomic) CXHandoffContext handoffContext;
@property (nonatomic) CXScreenShareAttributes screenShareAttributes;
@property (nonatomic) NSDictionary context;
@property (nonatomic) BOOL prefersExclusiveAccessToCellularNetwork;
@property (nonatomic) BOOL remoteUplinkMuted;
@property (nonatomic) BOOL shouldSuppressInCallUI;
@property (nonatomic) BOOL mutuallyExclusiveCall;
@property (nonatomic) q junkConfidence;
@property (nonatomic) q identificationCategory;
@property (nonatomic) BOOL supportsUnambiguousMultiPartyState;
@property (nonatomic) BOOL supportsAddCall;
@property (nonatomic) BOOL supportsSendingToVoicemail;
@property (nonatomic) q videoStreamToken;
@property (nonatomic) BOOL requiresAuthentication;
@property (nonatomic) BOOL conversation;
@property (nonatomic) BOOL mixesVoiceWithMedia;
@property (nonatomic) BOOL mediaPlaybackOnExternalDevice;
@property (nonatomic) BOOL ignoresBluetoothDeviceUID;
@property (nonatomic) BOOL sharingScreen;
@property (nonatomic) BOOL oneToOneModeEnabled;
@property (nonatomic) q bluetoothAudioFormat;
@property (nonatomic) BOOL sendingVideo;
@property (nonatomic) CXSandboxExtendedURL localizedCallerImageURL;
@property (nonatomic) q serviceStatus;
@property (nonatomic) q transmissionMode;
@property (nonatomic) CXHandle remoteHandle;
@property (nonatomic) NSString localizedCallerName;
@property (nonatomic) BOOL supportsHolding;
@property (nonatomic) BOOL supportsGrouping;
@property (nonatomic) BOOL supportsUngrouping;
@property (nonatomic) BOOL supportsDTMF;
@property (nonatomic) BOOL hasVideo;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (id)account;
- (void)setServiceStatus:;
- (id)init;
- (void)setAccount:;
- (long long)serviceStatus;
- (void)setAudioCategory:;
- (void)setPriority:;
- (void)setHasVideo:;
- (id)accessorLock;
- (id)context;
- (BOOL)supportsGrouping;
- (void)setUUID:;
- (id)audioCategory;
- (void)setSupportsGrouping:;
- (BOOL)conversation;
- (BOOL)hasVideo;
- (void)setRequiresAuthentication:;
- (id)initWithCoder:;
- (void)setMediaPlaybackOnExternalDevice:;
- (void)encodeWithCoder:;
- (id)sanitizedCopy;
- (void).cxx_destruct;
- (BOOL)isBlocked;
- (id)description;
- (void)setMixesVoiceWithMedia:;
- (void)setContext:;
- (id)UUID;
- (BOOL)requiresAuthentication;
- (id)copyWithZone:;
- (long long)priority;
- (BOOL)blocked;
- (id)ISOCountryCode;
- (void)setISOCountryCode:;
- (BOOL)isEmergency;
- (void)setBlocked:;
- (void)setConversation:;
- (long long)ttyType;
- (void)setTTYType:;
- (void)setLocalSenderIdentityUUID:;
- (BOOL)emergency;
- (void)setEmergency:;
- (long long)verificationStatus;
- (void)setVerificationStatus:;
- (id)localizedCallerName;
- (void)setLocalizedCallerName:;
- (id)audioMode;
- (void)setAudioMode:;
- (void)setShouldSuppressInCallUI:;
- (id)sanitizedCopyWithZone:;
- (id)otherInvitedHandles;
- (BOOL)isOneToOneModeEnabled;
- (void)setOtherInvitedHandles:;
- (void)setOneToOneModeEnabled:;
- (BOOL)oneToOneModeEnabled;
- (BOOL)isSendingVideo;
- (void)setSendingVideo:;
- (BOOL)sendingVideo;
- (BOOL)shouldSuppressInCallUI;
- (BOOL)supportsHolding;
- (BOOL)supportsUngrouping;
- (BOOL)supportsDTMF;
- (BOOL)supportsUnambiguousMultiPartyState;
- (BOOL)supportsAddCall;
- (BOOL)supportsSendingToVoicemail;
- (void)setSupportsHolding:;
- (void)setSupportsUngrouping:;
- (void)setSupportsDTMF:;
- (void)setSupportsUnambiguousMultiPartyState:;
- (void)setSupportsAddCall:;
- (void)setSupportsSendingToVoicemail:;
- (id)activeRemoteParticipant;
- (long long)transmissionMode;
- (void)setSharingScreen:;
- (void)setScreenShareAttributes:;
- (void)setBluetoothAudioFormat:;
- (void)setActiveRemoteParticipant:;
- (id)announceProviderIdentifier;
- (void)setAnnounceProviderIdentifier:;
- (BOOL)isFailureExpected;
- (void)setFailureExpected:;
- (BOOL)supportsEmergencyFallback;
- (void)setSupportsEmergencyFallback:;
- (BOOL)isUsingBaseband;
- (void)setUsingBaseband:;
- (long long)bluetoothAudioFormat;
- (BOOL)supportsTTYWithVoice;
- (void)setSupportsTTYWithVoice:;
- (long long)videoStreamToken;
- (void)setVideoStreamToken:;
- (id)remoteParticipantHandles;
- (void)setRemoteParticipantHandles:;
- (BOOL)prefersExclusiveAccessToCellularNetwork;
- (void)setPrefersExclusiveAccessToCellularNetwork:;
- (BOOL)isRemoteUplinkMuted;
- (void)setRemoteUplinkMuted:;
- (id)localSenderIdentityUUID;
- (id)localSenderIdentityAccountUUID;
- (void)setLocalSenderIdentityAccountUUID:;
- (BOOL)isMutuallyExclusiveCall;
- (void)setMutuallyExclusiveCall:;
- (BOOL)isSharingScreen;
- (BOOL)isConversation;
- (id)screenShareAttributes;
- (void)setTransmissionMode:;
- (BOOL)mixesVoiceWithMedia;
- (BOOL)failureExpected;
- (BOOL)usingBaseband;
- (BOOL)sharingScreen;
- (BOOL)remoteUplinkMuted;
- (BOOL)mutuallyExclusiveCall;
- (id)handoffContext;
- (BOOL)mediaPlaybackOnExternalDevice;
- (long long)junkConfidence;
- (long long)identificationCategory;
- (void)updateSanitizedCopy:withZone:;
- (void)updateCopy:withZone:;
- (void)setHandoffContext:;
- (id)hasSet;
- (void)setHasSet:;
- (void)setAudioInterruptionOperationMode:;
- (void)setAudioInterruptionProvider:;
- (void)updateWithUpdate:;
- (long long)audioInterruptionOperationMode;
- (long long)audioInterruptionProvider;
- (id)remoteHandle;
- (void)setRemoteHandle:;
- (id)localizedCallerImageURL;
- (void)setLocalizedCallerImageURL:;
- (BOOL)mayRequireBreakBeforeMake;
- (void)setMayRequireBreakBeforeMake:;
- (BOOL)requiresInCallSounds;
- (void)setRequiresInCallSounds:;
- (long long)inCallSoundRegion;
- (void)setInCallSoundRegion:;
- (id)crossDeviceIdentifier;
- (void)setCrossDeviceIdentifier:;
- (id)participantGroupUUID;
- (void)setParticipantGroupUUID:;
- (id)activeRemoteParticipantHandles;
- (void)setActiveRemoteParticipantHandles:;
- (void)setJunkConfidence:;
- (void)setIdentificationCategory:;
- (BOOL)ignoresBluetoothDeviceUID;
- (void)setIgnoresBluetoothDeviceUID:;
+ (BOOL)supportsSecureCoding;
+ (id)callUpdateWithDefaultValuesSet;
@end
