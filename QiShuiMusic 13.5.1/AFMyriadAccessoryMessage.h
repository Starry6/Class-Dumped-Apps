@interface AFMyriadAccessoryMessage : NSObject
@property (nonatomic) C version;
@property (nonatomic) Q requestType;
@property (nonatomic) Q session;
@property (nonatomic) double voiceTriggerEndTime;
@property (nonatomic) S audioHash;
@property (nonatomic) C goodnessScore;
@property (nonatomic) C userConfidenceScore;
@property (nonatomic) C tieBreaker;
@property (nonatomic) C deviceClass;
@property (nonatomic) C deviceGroup;
@property (nonatomic) C productType;
@property (nonatomic) C electionDecision;
@property (nonatomic) C emergencyHandled;
@property (nonatomic) C ack;
@property (nonatomic) NSUUID accessoryId;
@property (nonatomic) BOOL isSane;
@property (nonatomic) BOOL serializedProtocol;
- (unsigned long long)requestType;
- (unsigned char)deviceGroup;
- (unsigned char)deviceClass;
- (unsigned char)productType;
- (unsigned char)version;
- (unsigned long long)session;
- (void).cxx_destruct;
- (id)description;
- (unsigned char)isAcknowledgement;
- (void)_initWithMessage:;
- (id)accessoryId;
- (id)messageAsData;
- (BOOL)isSane;
- (unsigned char)tieBreaker;
- (double)voiceTriggerEndTime;
- (unsigned char)goodnessScore;
- (void)_copyRawBytesFromSource:toDest:length:;
- (void)_initializeMessageObj:;
- (void)_initializeMessageObjFromDictionary:;
- (id)initWithRequestType:session:voiceTriggerEndTime:audioHash:goodnessScore:userConfidenceScore:tieBreaker:deviceClass:deviceGroup:productType:electionDecision:emergencyHandled:ack:accessoryId:;
- (id)initPreheatMessageWithSessionId:accessoryId:;
- (id)initElectionDecisionMessageWithSessionId:decision:accessoryId:;
- (id)initResetMessageWithSessionId:accessoryId:;
- (id)initWithAccessoryMessage:accessoryId:;
- (id)initWithAccessoryMessageAsDictionary:accessoryId:;
- (unsigned short)audioHash;
- (unsigned char)userConfidenceScore;
- (unsigned char)electionWon;
- (unsigned char)isEmergencyHandled;
- (BOOL)usesSerializedProtocol;
+ (id)protocolName;
+ (id)messageKey;
+ (id)acknowledgeRequestKey;
+ (id)audioDataKey;
+ (id)deviceInfoKey;
+ (id)electionDecisionKey;
+ (id)emergencyHandledKey;
+ (id)sessionIdKey;
+ (id)requestTypeKey;
+ (BOOL)isMyriadRequestMessage:;
+ (id)myriadRequestTypeAsString:;
@end
