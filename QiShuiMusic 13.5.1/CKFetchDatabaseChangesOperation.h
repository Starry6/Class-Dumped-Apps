@interface CKFetchDatabaseChangesOperation : CKDatabaseOperation
@property (nonatomic) CKServerChangeToken serverChangeToken;
@property (nonatomic) q status;
@property (nonatomic) <CKFetchDatabaseChangesOperationCallbacks> clientOperationCallbackProxy;
@property (nonatomic) CKFetchDatabaseChangesOperationInfo operationInfo;
@property (nonatomic) CKServerChangeToken previousServerChangeToken;
@property (nonatomic) Q resultsLimit;
@property (nonatomic) BOOL fetchAllChanges;
@property (nonatomic) @? recordZoneWithIDChangedBlock;
@property (nonatomic) @? recordZoneWithIDWasDeletedBlock;
@property (nonatomic) @? recordZoneWithIDWasPurgedBlock;
@property (nonatomic) @? recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock;
@property (nonatomic) @? changeTokenUpdatedBlock;
@property (nonatomic) @? fetchDatabaseChangesCompletionBlock;
- (void)_finishOnCallbackQueueWithError:;
- (void)setResultsLimit:;
- (void)setPreviousServerChangeToken:;
- (id)previousServerChangeToken;
- (void)setStatus:;
- (void)handleChangeForRecordZoneID:;
- (id)recordZoneWithIDWasDeletedBlock;
- (id)activityCreate;
- (id)init;
- (void)setFetchAllChanges:;
- (void)setRecordZoneWithIDWasPurgedBlock:;
- (void)setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock:;
- (BOOL)fetchAllChanges;
- (void)setFetchDatabaseChangesCompletionBlock:;
- (id)initWithPreviousServerChangeToken:;
- (unsigned long long)resultsLimit;
- (void)performCKOperation;
- (void)setServerChangeToken:;
- (void)handlePurgeForRecordZoneID:;
- (void)handleDeleteForRecordZoneID:;
- (id)fetchDatabaseChangesCompletionBlock;
- (void)setRecordZoneWithIDChangedBlock:;
- (void)fillFromOperationInfo:;
- (void)setChangeTokenUpdatedBlock:;
- (id)recordZoneWithIDWasPurgedBlock;
- (BOOL)hasCKOperationCallbacksSet;
- (id)recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock;
- (void).cxx_destruct;
- (id)serverChangeToken;
- (void)handleChangeSetCompletionWithServerChangeToken:databaseChangesStatus:error:reply:;
- (id)changeTokenUpdatedBlock;
- (void)fillOutOperationInfo:;
- (long long)status;
- (void)handleEncryptedDataResetForRecordZoneID:;
- (id)recordZoneWithIDChangedBlock;
- (void)setRecordZoneWithIDWasDeletedBlock:;
+ (void)applyDaemonCallbackInterfaceTweaks:;
@end
