@interface CKSQLite : NSObject
@property (nonatomic) ^{sqlite3=} db;
@property (nonatomic) Q openCount;
@property (nonatomic) BOOL invalid;
@property (nonatomic) NSString path;
@property (nonatomic) NSString schema;
@property (nonatomic) NSString schemaVersion;
@property (nonatomic) NSString objectClassPrefix;
@property (nonatomic) NSInteger userVersion;
@property (nonatomic) q synchronousMode;
@property (nonatomic) BOOL isOpen;
@property (nonatomic) BOOL isCorrupt;
@property (nonatomic) BOOL hasMigrated;
@property (nonatomic) BOOL shouldVacuum;
@property (nonatomic) BOOL traced;
@property (nonatomic) @? invalidationHandler;
@property (nonatomic) <CKSQLiteDelegate> delegate;
- (void)setDateProperty:forKey:;
- (int)userVersion;
- (void)removePropertyForKey:;
- (id)datePropertyForKey:;
- (id)db;
- (BOOL)openWithError:;
- (void)vacuum;
- (id)path;
- (long long)lastInsertRowID;
- (id)schema;
- (BOOL)remove;
- (void)dealloc;
- (void)setInvalid:;
- (BOOL)isOpen;
- (id)handleError:;
- (void)setDelegate:;
- (unsigned long long)openCount;
- (void)close;
- (void)setProperty:forKey:;
- (BOOL)isCorrupt;
- (void)willCreateDatabase;
- (id)propertyForKey:;
- (id)sqlErrorWithMessage:;
- (int)changes;
- (void)setOpenCount:;
- (void)executeSQL:;
- (BOOL)invalid;
- (void)setUserVersion:;
- (id)delegate;
- (long long)synchronousMode;
- (void).cxx_destruct;
- (id)invalidationHandler;
- (void)setInvalidationHandler:;
- (void)setSynchronousMode:;
- (void)setDb:;
- (id)schemaVersion;
- (BOOL)hasMigrated;
- (id)creationDate;
- (void)executeSQL:arguments:;
- (void)usingStatementForSQL:performBlock:;
- (void)select:from:where:bindings:orderBy:limit:block:;
- (void)selectFrom:where:bindings:orderBy:limit:block:;
- (void)select:from:where:bindings:orderBy:limit:offset:block:;
- (void)update:set:where:bindings:limit:;
- (long long)insertOrReplaceInto:values:;
- (long long)upsertInto:values:onConflict:doUpdate:where:;
- (void)deleteFrom:where:bindings:;
- (void)deleteFrom:matchingValues:;
- (long long)insertOrReplaceObject:;
- (BOOL)deleteExactObject:;
- (id)selectObjectOfClass:where:bindings:;
- (void)updateAllObjectsOfClass:set:where:bindings:;
- (void)selectAllObjectsOfClass:where:bindings:orderBy:limit:block:;
- (id)allTableNames;
- (id)columnNamesForTable:;
- (id)select:from:;
- (id)select:from:where:bindings:;
- (id)select:from:where:bindings:orderBy:;
- (id)select:from:where:bindings:orderBy:limit:;
- (id)selectAllFrom:where:bindings:;
- (long long)selectCountFrom:where:bindings:;
- (int)deleteAllObjectsOfClass:where:bindings:;
- (id)selectAllObjectsOfClass:;
- (id)selectAllObjectsOfClass:where:bindings:;
- (id)selectAllObjectsOfClass:where:bindings:limit:;
- (id)initWithPath:schema:;
- (void)assertInOperation:;
- (void)markCorrupt;
- (id)_performDatabaseOperation_locked:withErrorHandler:;
- (void)_recursiveOperationLock:;
- (id)performDatabaseOperation:withErrorHandler:;
- (id)performDatabaseOperation:;
- (id)handleDatabaseError:args:;
- (id)handleDatabaseError:;
- (id)_prepareDatabase;
- (void)_forceClosed_locked;
- (void)_forceClosed_unlocked;
- (void)setTraced:;
- (void)_dropAllTables;
- (id)selectFrom:where:bindings:limit:;
- (id)_tableNameForClass:;
- (id)_boxedPropertyDictionary:forObjCClass:;
- (id)_boxedValue:forObjcCProperty:;
- (int)dbUserVersion;
- (id)objectClassPrefix;
- (void)setObjectClassPrefix:;
- (BOOL)shouldVacuum;
- (void)setShouldVacuum:;
- (BOOL)traced;
+ (id)equalityClauseAndBindingsForDict:;
@end
