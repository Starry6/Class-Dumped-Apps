@interface IESMMAudioCapture : NSObject
@property (nonatomic) Q sampleRate;
@property (nonatomic) Q channelNum;
@property (nonatomic) BOOL isCaptureStarted;
@property (nonatomic) IESWeakSelectorTarget timer;
@property (nonatomic) double currentHeartBeat;
@property (nonatomic) double lastBufferInputTimeForLogging;
@property (nonatomic) ^{OpaqueAudioComponent=} component;
@property (nonatomic) ^{OpaqueAudioComponentInstance=} componetInstance;
@property (nonatomic) ^{OpaqueAudioConverter=} audioConverter;
@property (nonatomic) {AudioBuffer=II^v} dstAudioBuffer;
@property (nonatomic) {AudioBufferList=I[1{AudioBuffer=II^v}]} bufferList;
@property (nonatomic) {AudioStreamBasicDescription=dIIIIIIII} convertDesc;
@property (nonatomic) VELimitLogger audioLimitLogger;
@property (nonatomic) @? audioCaptureBlock;
@property (nonatomic) @? audioConvertCallback;
@property (nonatomic) @? audioBGMOutputCallback;
@property (nonatomic) @? audioBGMResultCallback;
@property (nonatomic) @? audioBGMStatusCallback;
@property (nonatomic) BOOL needConvert;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (double)accompanyVolume;
- (void)setAccompanyMusicFile:fromTime:OriginalSingMusicFile:startTime:;
- (void)setMusicVolume:;
- (void)heartBeatListen;
- (void)mutedAccompany:;
- (void)setNeedConvert:;
- (void)accompanySeekToTime:;
- (id)audioBGMOutputCallback;
- (id)audioBGMResultCallback;
- (id)audioBGMStatusCallback;
- (id)audioCaptureBlock;
- (id)audioConvertCallback;
- (id)audioConverter;
- (id)bufferList;
- (id)componetInstance;
- (void)convertAudioBuffer:timeInfo:;
- (double)currentHeartBeat;
- (void)echoEnable:;
- (double)getAccompanyCurrentTime;
- (double)getDuetKaraokeModeCurrentTime;
- (double)getOriginalSingCurrentTime;
- (void)initAudioConvert;
- (void)initMicrophoneSource;
- (BOOL)isCaptureStarted;
- (void)logErrorStatus:func:;
- (void)mutedOrignalSing:;
- (BOOL)needConvert;
- (void)originalSingSeekToTime:;
- (double)originalSingVolume;
- (double)recordVolume;
- (void)releaseAudioCapture;
- (void)routeChanged;
- (void)seekDuetKaraokeModeToTime:;
- (void)seekToAccompanyTime:accompanyStartWritingTime:originalSingTime:originalSingStartWritingTime:;
- (void)setAccompanyVolume:;
- (void)setAudioBGMOutputCallback:;
- (void)setAudioBGMResultCallback:;
- (void)setAudioBGMStatusCallback:;
- (void)setAudioCaptureBlock:;
- (void)setAudioCaptureSampleRate;
- (void)setAudioConvertCallback:;
- (void)setAudioConverter:;
- (void)setBufferList:;
- (void)setCurrentHeartBeat:;
- (void)setDuetKaraokeModeMusic:fromTime:;
- (void)setEnableEarBack:;
- (void)setIsCaptureStarted:;
- (void)setOriginalSingVolume:;
- (void)setRecordVolume:;
- (void)startAudioCapture:withPrivacyCert:;
- (void)stopAudioCapture:;
- (double)lastBufferInputTimeForLogging;
- (void)setLastBufferInputTimeForLogging:;
- (void)setComponetInstance:;
- (id)dstAudioBuffer;
- (void)setDstAudioBuffer:;
- (id)convertDesc;
- (void)setConvertDesc:;
- (id)audioLimitLogger;
- (void)setAudioLimitLogger:;
- (BOOL)isAudioCaptureRuning;
- (double)musicVolume;
- (id)init;
- (void)dealloc;
- (void)play;
- (unsigned long long)sampleRate;
- (id)component;
- (void)setTimer:;
- (void).cxx_destruct;
- (id)timer;
- (void)pause;
- (void)setSampleRate:;
- (void)setComponent:;
- (void)setChannelNum:;
- (unsigned long long)channelNum;
+ (BOOL)isUseExternalPluggUseA2DP;
+ (void)setUseNewFormat:;
+ (id)audioDescription;
@end
