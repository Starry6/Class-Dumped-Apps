@interface VEAudioCaptureAndPlayUnit : NSObject
@property (nonatomic) ^{OpaqueAudioComponentInstance=} outputUnit;
@property (nonatomic) {AudioStreamBasicDescription=dIIIIIIII} asbd;
@property (nonatomic) {AudioStreamBasicDescription=dIIIIIIII} playAsbd;
@property (nonatomic) BOOL isHeadphonesPort;
@property (nonatomic) Q status;
@property (nonatomic) Q businessStatus;
@property (nonatomic) ^{AudioBufferList=I[1{AudioBuffer=II^v}]} renderBufferList;
@property (nonatomic) I recordBufferSize;
@property (nonatomic) {IESRecorderDescription=fffdddff} currentFormat;
@property (nonatomic) BOOL isCapturing;
@property (nonatomic) BOOL waitingForFirstPlayCallback;
@property (nonatomic) NSInteger kSourceBytesPerPacket;
@property (nonatomic) ^{OpaqueAudioConverter=} audioConverter;
@property (nonatomic) ^{AudioBuffer=II^v} convertBuffer;
@property (nonatomic) {AudioBufferList=I[1{AudioBuffer=II^v}]} bufferList;
@property (nonatomic) {AudioStreamBasicDescription=dIIIIIIII} convertDesc;
@property (nonatomic) @ privacyCert;
@property (nonatomic) @? audioCaptureBlock;
@property (nonatomic) @? audioConvertCallback;
@property (nonatomic) @? audioBGMOutputCallback;
@property (nonatomic) @? audioBGMResultCallback;
@property (nonatomic) @? audioBGMStatusCallback;
@property (nonatomic) BOOL needConvert;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
@property (nonatomic) @? getNextBufferBlock;
@property (nonatomic) @? getUnitNextBufferBlock;
@property (nonatomic) @? playDidStartBlock;
@property (nonatomic) BOOL isPlaying;
- (double)accompanyVolume;
- (void)resetAudioQueue;
- (void)setIsCapturing:;
- (void)setMusicVolume:;
- (void)setWaitingForFirstPlayCallback:;
- (void)setupAudioSessonWithCompletion:;
- (void)mutedAccompany:;
- (void)setNeedConvert:;
- (void)setPrivacyCert:;
- (id)audioBGMOutputCallback;
- (id)audioBGMResultCallback;
- (id)audioBGMStatusCallback;
- (id)audioCaptureBlock;
- (id)audioConvertCallback;
- (id)audioConverter;
- (id)bufferList;
- (unsigned long long)businessStatus;
- (void)configOutputUnit;
- (void)convertAudioBuffer:;
- (id)convertBuffer;
- (void)destroyUnit;
- (void)echoEnable:;
- (void)enableCapture:;
- (void)enablePlay:;
- (double)getAccompanyCurrentTime;
- (double)getDuetKaraokeModeCurrentTime;
- (id)getNextBufferBlock;
- (double)getOriginalSingCurrentTime;
- (id)getUnitNextBufferBlock;
- (void)initAudioConvert;
- (void)initAudioUnit;
- (BOOL)initUnit;
- (id)initWithAudioFormat:;
- (BOOL)isAudioCaptureRunning;
- (BOOL)isHeadphoneOutput;
- (BOOL)isHeadphonesPort;
- (int)kSourceBytesPerPacket;
- (void)mutedOrignalSing:;
- (BOOL)needConvert;
- (double)originalSingVolume;
- (void)p_destroyUnit;
- (id)playAsbd;
- (id)playDidStartBlock;
- (id)privacyCert;
- (unsigned int)recordBufferSize;
- (double)recordVolume;
- (void)recreateGraphIfNeeded;
- (void)releaseAudioCapture;
- (id)renderBufferList;
- (void)resetAudioQueueBufferArray;
- (void)routeChanged;
- (void)routeChanged:;
- (id)sampleBufferFromAudioBuffer:inTimeStamp:inNumberFrames:asbd:;
- (void)setAccompanyVolume:;
- (void)setAudioBGMOutputCallback:;
- (void)setAudioBGMResultCallback:;
- (void)setAudioBGMStatusCallback:;
- (void)setAudioCaptureBlock:;
- (void)setAudioConvertCallback:;
- (void)setAudioConverter:;
- (void)setBufferList:;
- (void)setBusinessStatus:;
- (void)setConvertBuffer:;
- (void)setCurrentFormat:;
- (void)setEnableEarBack:;
- (void)setGetNextBufferBlock:;
- (void)setGetUnitNextBufferBlock:;
- (void)setIsHeadphonesPort:;
- (void)setKSourceBytesPerPacket:;
- (void)setOriginalSingVolume:;
- (void)setOutPutVolume:;
- (void)setPlayAsbd:;
- (void)setPlayDidStartBlock:;
- (void)setRecordBufferSize:;
- (void)setRecordVolume:;
- (void)setRenderBufferList:;
- (void)startAudioCapture:withPrivacyCert:;
- (void)startAudioUnitCapture:withPrivacyCert:;
- (void)startAudioUnitCaptureSync:withPrivacyCert:;
- (void)startUnitWithPrivacyCert:completeBlock:;
- (void)stopAudioCapture:;
- (void)stopAudioUnitCapture:;
- (void)stopUnitWithPrivacyCert:;
- (BOOL)unitExist;
- (BOOL)waitingForFirstPlayCallback;
- (id)convertDesc;
- (void)setConvertDesc:;
- (void)resetState;
- (double)musicVolume;
- (void)setStatus:;
- (BOOL)isPlaying;
- (void)dealloc;
- (void)setIsPlaying:;
- (void)play;
- (void)setVolume:;
- (void)stop;
- (double)getCurrentTime;
- (BOOL)isRunning;
- (BOOL)isCapturing;
- (void)flush;
- (void).cxx_destruct;
- (unsigned long long)status;
- (BOOL)setAudioSessionCategory:;
- (void)pause;
- (id).cxx_construct;
- (id)asbd;
- (void)setAsbd:;
- (float)getVolume;
- (id)outputUnit;
- (void)setOutputUnit:;
- (void)audioSessionWasInterrupted:;
- (id)currentFormat;
+ (id)audioPlayDescription;
+ (void)updateCurrrentSampleRate;
+ (id)sharedInstance;
+ (id)audioDescription;
@end
