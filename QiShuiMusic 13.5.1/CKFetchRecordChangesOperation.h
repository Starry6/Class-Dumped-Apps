@interface CKFetchRecordChangesOperation : CKDatabaseOperation
@property (nonatomic) CKServerChangeToken resultServerChangeToken;
@property (nonatomic) NSData resultClientChangeTokenData;
@property (nonatomic) q status;
@property (nonatomic) BOOL shouldFetchAssetContents;
@property (nonatomic) BOOL fetchAllChanges;
@property (nonatomic) NSMutableDictionary recordErrors;
@property (nonatomic) @? serverChangeTokenFetchedBlock;
@property (nonatomic) @? changeTokensUpdatedBlock;
@property (nonatomic) <CKFetchRecordChangesOperationCallbacks> clientOperationCallbackProxy;
@property (nonatomic) CKFetchRecordZoneChangesOperationInfo operationInfo;
@property (nonatomic) CKRecordZoneID recordZoneID;
@property (nonatomic) CKServerChangeToken previousServerChangeToken;
@property (nonatomic) Q resultsLimit;
@property (nonatomic) NSArray desiredKeys;
@property (nonatomic) @? recordChangedBlock;
@property (nonatomic) @? recordWithIDWasDeletedBlock;
@property (nonatomic) BOOL moreComing;
@property (nonatomic) @? fetchRecordChangesCompletionBlock;
- (void)_finishOnCallbackQueueWithError:;
- (id)recordChangedBlock;
- (void)setResultsLimit:;
- (void)setPreviousServerChangeToken:;
- (id)previousServerChangeToken;
- (void)setStatus:;
- (BOOL)shouldFetchAssetContents;
- (void)setRecordChangedBlock:;
- (void)setDesiredKeys:;
- (id)activityCreate;
- (id)init;
- (id)relevantZoneIDs;
- (id)recordErrors;
- (void)setFetchAllChanges:;
- (BOOL)fetchAllChanges;
- (void)setShouldFetchAssetContents:;
- (void)setRecordWithIDWasDeletedBlock:;
- (unsigned long long)resultsLimit;
- (id)recordWithIDWasDeletedBlock;
- (id)desiredKeys;
- (id)resultClientChangeTokenData;
- (void)handleChangeForRecordID:record:error:;
- (void)performCKOperation;
- (void)setRecordErrors:;
- (void)setResultServerChangeToken:;
- (void)fillFromOperationInfo:;
- (BOOL)hasCKOperationCallbacksSet;
- (void).cxx_destruct;
- (void)setResultClientChangeTokenData:;
- (void)fillOutOperationInfo:;
- (long long)status;
- (void)setRecordZoneID:;
- (BOOL)CKOperationShouldRun:;
- (long long)changeTypesFromSetCallbacks;
- (id)recordZoneID;
- (id)resultServerChangeToken;
- (BOOL)moreComing;
- (void)handleOperationDidCompleteWithServerChangeToken:clientChangeTokenData:recordChangesStatus:metrics:error:;
- (void)handleDeleteForRecordID:;
- (void)handleChangeSetCompletionWithServerChangeToken:clientChangeTokenData:recordChangesStatus:reply:;
- (id)initWithRecordZoneID:previousServerChangeToken:;
- (void)setFetchRecordChangesCompletionBlock:;
- (id)fetchRecordChangesCompletionBlock;
- (void)setServerChangeTokenFetchedBlock:;
- (id)serverChangeTokenFetchedBlock;
- (void)setChangeTokensUpdatedBlock:;
- (id)changeTokensUpdatedBlock;
+ (void)applyDaemonCallbackInterfaceTweaks:;
+ (SEL)daemonCallbackCompletionSelector;
+ (Class)operationInfoClass;
@end
