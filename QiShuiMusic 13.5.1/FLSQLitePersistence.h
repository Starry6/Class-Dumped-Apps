@interface FLSQLitePersistence : NSObject
@property (nonatomic) NSString databasePath;
@property (nonatomic) NSObject<OS_os_log> log;
@property (nonatomic) FLLoggingContext context;
@property (nonatomic) ^{sqlite3_stmt=} insertRecordsStatement;
@property (nonatomic) ^{sqlite3_stmt=} iteratePayloadStatement;
@property (nonatomic) NSString storeIdentifier;
@property (nonatomic) AB configured;
@property (nonatomic) Q maxBatchPayloadInBytes;
@property (nonatomic) Q maxAllowedDatabaseSizeInBytes;
@property (nonatomic) NSString currentBatchIdentifier;
@property (nonatomic) NSDate currentBatchCreationDate;
@property (nonatomic) Q currentBatchPayloadSize;
@property (nonatomic) double batchMaximumDuration;
@property (nonatomic) ^{sqlite3_stmt=} maxRowIdStatement;
@property (nonatomic) ^{sqlite3=} db;
@property (nonatomic) FLSQLiteDatabaseConnection dbConnection;
- (id)databasePath;
- (id)db;
- (BOOL)vacuum;
- (id)storeIdentifier;
- (void)dealloc;
- (BOOL)open;
- (id)log;
- (id)context;
- (void)setLog:;
- (BOOL)deleteDatabase;
- (BOOL)createDatabase;
- (BOOL)configured;
- (void)setDbConnection:;
- (void).cxx_destruct;
- (void)setConfigured:;
- (void)setDb:;
- (id)dbConnection;
- (void)setContext:;
- (void)closeDatabase;
- (int)getSchemaVersion;
- (id)persist:;
- (id)getUploadIdsWithStatus:;
- (id)getUploadIdsWithAllStatuses;
- (id)getPurgableUploadIds;
- (id)_getUploadIdsHelper:;
- (id)getUploadsRangeStart:end:;
- (BOOL)_updateStatusHelperForUpload:toStatus:;
- (BOOL)_updateMetadataHelperForUpload:query:;
- (BOOL)updateStatusForUpload:toStatus:;
- (BOOL)recoverOrphanedProcessingUploads;
- (long long)doUploadHousekeeping;
- (BOOL)markUploadsForPurge;
- (long long)cleanupPurgableUploads;
- (id)persistUploadPayload:;
- (id)getUploadRecordWithId:;
- (BOOL)iterateUploadsWithCodeblock:;
- (BOOL)deleteUploadWithIdentifier:;
- (BOOL)__deleteStatementHelper:forUploadId:;
- (BOOL)deleteAllUploads;
- (id)getBatchIdsWithStatus:;
- (id)getBatchIdsWithAllStatuses;
- (id)getPurgableBatchIds;
- (id)_getBatchIdsHelper:;
- (id)getRecordsRangeStart:end:;
- (BOOL)getBatchMetadata:batchMetadata:;
- (BOOL)_updateStatusHelperForBatch:toStatus:;
- (BOOL)_updateMetadataHelperForBatch:query:;
- (BOOL)updateStatusForBatch:toStatus:;
- (int)getDataVersion;
- (BOOL)initializeNewBatch;
- (BOOL)closeOrphanedBatches;
- (BOOL)closeAllBatches;
- (BOOL)forceCloseOpenBatches;
- (BOOL)closeOpenBatch;
- (BOOL)recoverOrphanedProcessingBatches;
- (BOOL)markBatchesforPurge;
- (long long)doBatchesHousekeeping;
- (BOOL)purgeBatch:;
- (BOOL)__purgeStatementHelper:forBatchId:;
- (BOOL)purgeAllBatches;
- (BOOL)prepareSchema;
- (BOOL)isSchemaReady;
- (BOOL)updateSchema;
- (unsigned long long)getCurrentDatabaseSize;
- (BOOL)setDatabaseSizeLimit;
- (id)initWithStoreId:dbConnection:loggingContext:;
- (id)initWithStoreId:loggingContext:;
- (BOOL)initializeConnectionForUseBy:;
- (BOOL)tryRolloverBatchIfNecessary:;
- (BOOL)tryPrepare:preparedStatement:;
- (BOOL)executeSQLStatement:usingTransaction:;
- (BOOL)executeSQLStatement:;
- (BOOL)executeInTransactionMultipleSQLStatements:;
- (BOOL)iteratePayloadForBatch:codeblock:;
- (BOOL)getIntValueForPragma:into:;
- (id)insertRecordsStatement;
- (void)setInsertRecordsStatement:;
- (id)iteratePayloadStatement;
- (void)setIteratePayloadStatement:;
- (unsigned long long)maxBatchPayloadInBytes;
- (void)setMaxBatchPayloadInBytes:;
- (unsigned long long)maxAllowedDatabaseSizeInBytes;
- (void)setMaxAllowedDatabaseSizeInBytes:;
- (id)currentBatchIdentifier;
- (void)setCurrentBatchIdentifier:;
- (id)currentBatchCreationDate;
- (void)setCurrentBatchCreationDate:;
- (unsigned long long)currentBatchPayloadSize;
- (void)setCurrentBatchPayloadSize:;
- (double)batchMaximumDuration;
- (void)setBatchMaximumDuration:;
- (id)maxRowIdStatement;
- (void)setMaxRowIdStatement:;
- (void)finalizeObserver;
- (long long)maxRowId;
- (id)registerInsertionObserver:;
- (void)observeInsertionAtRow:observer:;
+ (id)uploadStatusDescription:;
+ (id)batchStatusDescription:;
@end
