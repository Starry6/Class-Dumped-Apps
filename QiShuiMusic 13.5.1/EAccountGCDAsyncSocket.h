@interface EAccountGCDAsyncSocket : NSObject
@property (nonatomic) <GCDAsyncSocketDelegate> delegate;
@property (nonatomic) NSObject<OS_dispatch_queue> delegateQueue;
@property (nonatomic) BOOL IPv4Enabled;
@property (nonatomic) BOOL IPv6Enabled;
@property (nonatomic) BOOL IPv4PreferredOverIPv6;
@property (nonatomic) BOOL isDisconnected;
@property (nonatomic) BOOL isConnected;
@property (nonatomic) NSString connectedHost;
@property (nonatomic) S connectedPort;
@property (nonatomic) BOOL isIPv4;
@property (nonatomic) BOOL isIPv6;
@property (nonatomic) BOOL isSecure;
- (double)alternateAddressDelay;
- (BOOL)bindSocket:toInterface:error:;
- (void)closeSocket:;
- (void)closeUnusedSocket:;
- (void)connectSocket:address:stateIndex:;
- (int)createSocket:connectInterface:errPtr:;
- (void)setAlternateAddressDelay:;
- (BOOL)isSecure;
- (void)closeWithError:;
- (BOOL)isIPv6;
- (void)dealloc;
- (id)initWithDelegate:delegateQueue:;
- (void)disconnect;
- (void)setDelegate:;
- (id)delegateQueue;
- (BOOL)isIPv4;
- (id)delegate;
- (void).cxx_destruct;
- (BOOL)isConnected;
- (void)setDelegateQueue:;
- (BOOL)isDisconnected;
- (int)socketFD;
- (BOOL)isIPv6Enabled;
- (id)initWithDelegate:delegateQueue:socketQueue:;
- (void)setDelegate:synchronously:;
- (void)setDelegateQueue:synchronously:;
- (void)setDelegate:delegateQueue:synchronously:;
- (void)setDelegate:delegateQueue:;
- (BOOL)isIPv4Enabled;
- (void)setIPv4Enabled:;
- (void)setIPv6Enabled:;
- (BOOL)isIPv4PreferredOverIPv6;
- (void)setIPv4PreferredOverIPv6:;
- (BOOL)preConnectWithInterface:error:;
- (BOOL)connectToHost:onPort:error:;
- (BOOL)connectToHost:onPort:withTimeout:error:;
- (BOOL)connectToHost:onPort:viaInterface:withTimeout:error:;
- (void)lookup:didSucceedWithAddress4:address6:;
- (void)lookup:didFail:;
- (BOOL)connectWithAddress4:address6:error:;
- (void)didConnect:;
- (void)didNotConnect:error:;
- (void)startConnectTimeout:;
- (void)endConnectTimeout;
- (void)doConnectTimeout;
- (id)badConfigError:;
- (id)badParamError:;
- (id)errnoErrorWithReason:;
- (id)errnoError;
- (id)sslError:;
- (id)connectTimeoutError;
- (id)readMaxedOutError;
- (id)readTimeoutError;
- (id)writeTimeoutError;
- (id)connectionClosedError;
- (id)otherError:;
- (id)connectedHost;
- (unsigned short)connectedPort;
- (id)connectedHost4;
- (id)connectedHost6;
- (unsigned short)connectedPort4;
- (unsigned short)connectedPort6;
- (id)connectedHostFromSocket4:;
- (id)connectedHostFromSocket6:;
- (unsigned short)connectedPortFromSocket4:;
- (unsigned short)connectedPortFromSocket6:;
- (void)getInterfaceAddress4:address6:fromDescription:port:;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:;
- (BOOL)usingCFStreamForTLS;
- (BOOL)usingSecureTransportForTLS;
- (void)suspendReadSource;
- (void)resumeReadSource;
- (void)suspendWriteSource;
- (void)resumeWriteSource;
- (void)readDataToLength:withTimeout:tag:;
- (void)readDataToLength:withTimeout:buffer:bufferOffset:tag:;
- (void)readDataToData:withTimeout:tag:;
- (void)readDataToData:withTimeout:buffer:bufferOffset:maxLength:tag:;
- (void)maybeDequeueRead;
- (void)flushSSLBuffers;
- (void)doReadData;
- (void)doReadEOF;
- (void)completeCurrentRead;
- (void)endCurrentRead;
- (void)setupReadTimerWithTimeout:;
- (void)doReadTimeout;
- (void)doReadTimeoutWithExtension:;
- (void)writeData:withTimeout:tag:;
- (void)maybeDequeueWrite;
- (void)doWriteData;
- (void)completeCurrentWrite;
- (void)endCurrentWrite;
- (void)setupWriteTimerWithTimeout:;
- (void)doWriteTimeout;
- (void)doWriteTimeoutWithExtension:;
- (void)startTLS:;
- (void)maybeStartTLS;
- (int)sslReadWithBuffer:length:;
- (int)sslWriteWithBuffer:length:;
- (void)ssl_startTLS;
- (void)ssl_continueSSLHandshake;
- (void)ssl_shouldTrustPeer:stateIndex:;
- (void)cf_finishSSLHandshake;
- (void)cf_abortSSLHandshake:;
- (void)cf_startTLS;
- (BOOL)createReadAndWriteStream;
- (BOOL)registerForStreamCallbacksIncludingReadWrite:;
- (BOOL)addStreamsToRunLoop;
- (void)removeStreamsFromRunLoop;
- (BOOL)openStreams;
- (int)socket4FD;
- (int)socket6FD;
- (id)readStream;
- (id)writeStream;
- (id)sslContext;
+ (void)ignore:;
+ (void)cfstreamThread;
+ (void)scheduleCFStreams:;
+ (void)unscheduleCFStreams:;
+ (id)gaiError:;
+ (void)startCFStreamThreadIfNeeded;
+ (void)stopCFStreamThreadIfNeeded;
+ (id)lookupHost:port:error:;
+ (id)hostFromSockaddr4:;
+ (id)hostFromSockaddr6:;
+ (unsigned short)portFromSockaddr4:;
+ (unsigned short)portFromSockaddr6:;
+ (unsigned short)portFromAddress:;
+ (BOOL)isIPv4Address:;
+ (BOOL)isIPv6Address:;
+ (BOOL)getHost:port:fromAddress:;
+ (BOOL)getHost:port:family:fromAddress:;
@end
