@interface BDAAppStoreManager : NSObject
@property (nonatomic) BOOL presenting;
@property (nonatomic) BDAAppStorePreloadList preloadList;
@property (nonatomic) BDAAppStorePreloadItem presentingItem;
@property (nonatomic) BOOL preloadOnlyWIFI;
@property (nonatomic) BOOL enablePreventSKGesture;
@property (nonatomic) Q maxPreloadCount;
@property (nonatomic) BOOL isReusePreload;
@property (nonatomic) q supportPreloadType;
@property (nonatomic) BOOL isPresentAnimated;
@property (nonatomic) BOOL isEnableFixRetainCycle;
@property (nonatomic) BOOL isCallSkanImpressionInAsyncThread;
@property (nonatomic) BOOL isForbidAppStoreLogic;
@property (nonatomic) BOOL shouldRequestAppManager;
@property (nonatomic) BOOL isHalfAppStore;
@property (nonatomic) Q halfAppStoreFrameY;
@property (nonatomic) BOOL isForbidSKStoreProductViewController;
@property (nonatomic) BOOL enableRetainSkvcAvoidCrash;
@property (nonatomic) @? SKStoreInitAction;
@property (nonatomic) @? openURLAction;
@property (nonatomic) @? openURLWithCompletionAction;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (BOOL)preloadOnlyWIFI;
- (void)setPreloadList:;
- (id)SKStoreInitAction;
- (unsigned long long)maxPreloadCount;
- (void)setOpenURLWithCompletionAction:;
- (void)clearAllPreloadCache;
- (void)clearPreloadCacheByAppID:;
- (void)clearPreloadCacheBySKController:;
- (id)controllerPreloadedByAppID:;
- (id)duplicatedControllerPreloadedByAppID:dismissAnimated:;
- (BOOL)enablePreventSKGesture;
- (BOOL)enableRetainSkvcAvoidCrash;
- (unsigned long long)halfAppStoreFrameY;
- (BOOL)hasControllerPreloadedByAppID:;
- (BOOL)isCallSkanImpressionInAsyncThread;
- (BOOL)isEnableFixRetainCycle;
- (BOOL)isForbidAppStoreLogic;
- (BOOL)isForbidSKStoreProductViewController;
- (BOOL)isHalfAppStore;
- (BOOL)isPresentAnimated;
- (BOOL)isReusePreload;
- (void)openAppStoreControllerWithAppID:downloadUrl:model:;
- (id)openURLAction;
- (id)openURLWithCompletionAction;
- (void)preloadAppStoreControllerWithAppID:skAdNetworkParams:businessIdentifyInfo:adID:logExtra:isDuplicate:completion:;
- (id)preloadList;
- (id)presentingItem;
- (void)sdkSessionLaunchMonitor;
- (void)setEnablePreventSKGesture:;
- (void)setEnableRetainSkvcAvoidCrash:;
- (void)setHalfAppStoreFrameY:;
- (void)setIsCallSkanImpressionInAsyncThread:;
- (void)setIsEnableFixRetainCycle:;
- (void)setIsForbidAppStoreLogic:;
- (void)setIsForbidSKStoreProductViewController:;
- (void)setIsHalfAppStore:;
- (void)setIsPresentAnimated:;
- (void)setIsReusePreload:;
- (void)setMaxPreloadCount:;
- (void)setOpenURLAction:;
- (void)setPreloadOnlyWIFI:;
- (void)setPresentingItem:;
- (void)setSKStoreInitAction:;
- (void)setShouldRequestAppManager:;
- (BOOL)shouldRequestAppManager;
- (BOOL)shouldStartPreloadWithAppID:error:;
- (long long)supportPreloadType;
- (void)trackOpenEndEventWithAdId:logExtra:appleId:status:successStyle:failedReason:duration:trackParams:error:;
- (void)trackPreloadEndEventWithAdId:logExtra:appleId:status:hasPresent:failedReason:duration:error:;
- (void)setPresenting:;
- (id)init;
- (void)dealloc;
- (void).cxx_destruct;
- (BOOL)presenting;
+ (void)checkAppStorePermissionWithModel:completion:;
+ (void)clearAllPreloadCache;
+ (void)clearPreloadCacheByAppID:;
+ (void)clearPreloadCacheBySKController:;
+ (id)complianceDataMonitors:;
+ (id)controllerPreloadedByAppID:;
+ (id)convertProductParamsWithModel:;
+ (id)convertProductParamsWithSKAdParamString:;
+ (id)convertSKAdImpressionParamsWithSKAdParamString:;
+ (id)duplicatedControllerWithAppID:dismissAnimated:;
+ (void)endImpressionWithSkanParamsString:adEventData:completionHandler:;
+ (BOOL)hasControllerPreloadedByAppID:;
+ (void)openAppStoreControllerWithModel:;
+ (void)preloadAppStoreControllerWithModel:;
+ (void)requestAppStoreManagerWithModel:times:completion:;
+ (void)startImpressionWithSkanParamsString:adEventData:completionHandler:;
+ (void)trackAppManagerRequestEventWithModel:complianceData:appleId:status:duration:times:message:;
+ (void)trackCommerceJumpEventWithModel:isPermit:errorCode:errorCodeMessage:;
+ (void)trackCommerceOpenEventWithModel:isPermit:errorCode:errorCodeMessage:;
+ (void)trackReserveInfoIfNeededWithModel:;
+ (id)sharedManager;
@end
