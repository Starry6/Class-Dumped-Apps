@interface BDTrackerConfigHolder : NSObject
@property (nonatomic) Q bgTask;
@property (nonatomic) UIApplication app;
@property (nonatomic) q backgroundTimestamp;
@property (nonatomic) BOOL isInBackground;
@property (nonatomic) q queueCountMax;
@property (nonatomic) q queueCount;
@property (nonatomic) q queueCountMax;
@property (nonatomic) NSObject<OS_dispatch_semaphore> queueLock;
@property (nonatomic) Q dataLength;
@property (nonatomic) q sessionIndex;
@property (nonatomic) q teaEventIndex;
@property (nonatomic) q v1TeaEventIndex;
@property (nonatomic) NSArray recoveredTrackID;
@property (nonatomic) NSMutableDictionary hookers;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
@property (nonatomic) <BDTrackerPluginCompression> compressZstdPlugin;
@property (nonatomic) ^{BDTrackerDefaultMMap={BDTrackerMapHeader=CBQ}{BDTrackerSessionData=ddqqq[37c][37c][37c]BBB}{BDTrackerTimeSyncData=qq}{BDTrackerCountData=qq}{BDTrackerTrackIDData=III[900I]}} mapData;
@property (nonatomic) BDTrackerSessionEvent recoveredLaunch;
@property (nonatomic) BDTrackerSessionEvent recoveredTerminate;
@property (nonatomic) ^{__CFRunLoopObserver=} runLoopObserver;
@property (nonatomic) NSString sessionID;
@property (nonatomic) NSMutableDictionary task;
@property (nonatomic) NSMutableArray taskOrders;
@property (nonatomic) q currentTimerInterval;
@property (nonatomic) NSObject<OS_dispatch_source> timer;
@property (nonatomic) NSObject<OS_dispatch_source> backgroundTimer;
@property (nonatomic) Q dataLength;
@property (nonatomic) q sessionIndex;
@property (nonatomic) q teaEventIndex;
@property (nonatomic) q v1TeaEventIndex;
@property (nonatomic) NSObject<OS_dispatch_semaphore> queueLock;
@property (nonatomic) q queueCount;
@property (nonatomic) q queueCountMax;
@property (nonatomic) NSMutableDictionary abSDKVersionWithUserBlocks;
@property (nonatomic) NSMutableDictionary httpHeaderBlocks;
@property (nonatomic) NSMutableDictionary hookers;
@property (nonatomic) q currentTimerInterval;
@property (nonatomic) NSMutableDictionary task;
@property (nonatomic) NSMutableArray taskOrders;
@property (nonatomic) Q bgTask;
@property (nonatomic) UIApplication app;
@property (nonatomic) q backgroundTimestamp;
@property (nonatomic) BOOL isInBackground;
@property (nonatomic) NSObject<OS_dispatch_queue> insertQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> hookQueue;
@property (nonatomic) ^{BDTrackerDefaultMMap={BDTrackerMapHeader=CBQ}{BDTrackerSessionData=ddqqq[37c][37c][37c]BBB}{BDTrackerTimeSyncData=qq}{BDTrackerCountData=qq}{BDTrackerTrackIDData=III[900I]}} mapData;
@property (nonatomic) BDTrackerSessionEvent recoveredTerminate;
@property (nonatomic) BDTrackerSessionEvent recoveredLaunch;
@property (nonatomic) ^{__CFRunLoopObserver=} runLoopObserver;
@property (nonatomic) NSString sessionID;
@property (nonatomic) NSArray recoveredTrackID;
@property (nonatomic) NSObject<OS_dispatch_source> timer;
@property (nonatomic) NSObject<OS_dispatch_source> backgroundTimer;
@property (nonatomic) NSString key;
@property (nonatomic) NSString iv;
@property (nonatomic) BDTrackerConfig config;
@property (nonatomic) NSMutableDictionary registerPlugins;
@property (nonatomic) BOOL sdkEnable;
@property (nonatomic) BOOL isInhouseVersion;
@property (nonatomic) BOOL didStartSDK;
@property (nonatomic) BOOL eventEnable;
@property (nonatomic) <BDTrackerLogClient> client;
@property (nonatomic) BDTrackerFrequencyDetector eventFreqDetector;
@property (nonatomic) # tracer;
@property (nonatomic) BOOL encrypt;
@property (nonatomic) NSArray immediateEventList;
@property (nonatomic) @? requestLimitBlock;
@property (nonatomic) @? launchRequestLimitBlock;
@property (nonatomic) @? timerRandomBlock;
@property (nonatomic) BOOL reportOnData1M;
@property (nonatomic) Q eventSizeLimit;
@property (nonatomic) Q httpSizeLimit;
@property (nonatomic) BOOL eventUserIDEnable;
@property (nonatomic) q uid;
@property (nonatomic) q userType;
@property (nonatomic) q userIsLogin;
@property (nonatomic) q userIsAuth;
@property (nonatomic) @? requestBackgroundBlock;
@property (nonatomic) BDTrackerPluginManager pluginManager;
@property (nonatomic) BDTrackerSamplingManager samplingManager;
@property (nonatomic) BOOL compressionZstdEnabled;
@property (nonatomic) BOOL compressionZstdDictEnabled;
- (id)mapData;
- (id)recoveredLaunch;
- (void)setEventEnable:;
- (void)setInsertQueue:;
- (void)setUserIsLogin:;
- (id)hookers;
- (void)markDataStatus:;
- (id)samplingManager;
- (void)setDidStartSDK:;
- (long long)v1TeaEventIndex;
- (id)abSDKVersionWithUserBlocks;
- (void)addABSDKVersionWithUserBlock:forKey:;
- (void)addHTTPHeaderBlock:forKey:;
- (void)addHooker:forKey:;
- (void)addRunLoopObserver;
- (void)addTask:forKey:order:;
- (long long)backgroundTimestamp;
- (unsigned long long)bgTask;
- (BOOL)compressionZstdDictEnabled;
- (BOOL)compressionZstdEnabled;
- (long long)currentTimerInterval;
- (void)decreaseQueueCount;
- (BOOL)didStartSDK;
- (id)ensureZstdPlugin;
- (BOOL)eventEnable;
- (id)eventFreqDetector;
- (unsigned long long)eventSizeLimit;
- (BOOL)eventUserIDEnable;
- (id)generateLaunchEvent;
- (id)generateOnlyBackgroundTerminateDataWithSessionID:;
- (id)generateTerminateEvent;
- (long long)globalIncreaseIdentifier;
- (id)hookQueue;
- (id)httpHeaderBlocks;
- (unsigned long long)httpSizeLimit;
- (id)immediateEventList;
- (void)increaseQueueCount;
- (id)increasedTrackID;
- (id)insertQueue;
- (BOOL)isInhouseVersion;
- (id)launchRequestLimitBlock;
- (void)loadMMap;
- (void)markLaunchEnd;
- (void)markTerminateEnd;
- (void)onCustomEventKey:parameter:;
- (void)onDidEnterBackground;
- (void)onEventV3:parameter:;
- (void)onWillEnterForeground;
- (Class)pluginClassForKey:;
- (long long)queueCountMax;
- (void)recordSendingTrackID:;
- (void)recoverDataStatus;
- (void)recoverSession;
- (id)recoveredTerminate;
- (id)recoveredTrackID;
- (void)removeABSDKVersionWithUserBlockForKey:;
- (void)removeHTTPHeaderBlockForKey:;
- (void)removeHookerForKey:;
- (void)removeRunLoopObserver;
- (BOOL)reportOnData1M;
- (id)requestBackgroundBlock;
- (id)requestLimitBlock;
- (void)resetSessionData;
- (BOOL)sdkEnable;
- (void)setAbSDKVersionWithUserBlocks:;
- (void)setBackgroundTimer:;
- (void)setBackgroundTimestamp:;
- (void)setBgTask:;
- (void)setCompressionZstdDictEnabled:;
- (void)setCompressionZstdEnabled:;
- (void)setCurrentTimerInterval:;
- (void)setEncrypt:;
- (void)setEventFreqDetector:;
- (void)setEventSizeLimit:;
- (void)setEventUserIDEnable:;
- (void)setHookQueue:;
- (void)setHookers:;
- (void)setHttpHeaderBlocks:;
- (void)setHttpSizeLimit:;
- (void)setImmediateEventList:;
- (void)setIsInBackground:;
- (void)setIsInHouseVersion:;
- (void)setIsInhouseVersion:;
- (void)setLaunchFrom:;
- (void)setLaunchRequestLimitBlock:;
- (void)setMapData:;
- (void)setPluginManager:;
- (void)setQueueCount:;
- (void)setQueueCountMax:;
- (void)setRecoveredLaunch:;
- (void)setRecoveredTerminate:;
- (void)setRecoveredTrackID:;
- (void)setRegisterPlugins:;
- (void)setReportOnData1M:;
- (void)setRequestBackgroundBlock:;
- (void)setRequestLimitBlock:;
- (void)setSamplingManager:;
- (void)setSdkEnable:;
- (void)setTaskOrders:;
- (void)setTeaEventIndex:;
- (void)setTimerRandomBlock:;
- (void)setUserIsAuth:;
- (void)setV1TeaEventIndex:;
- (void)startBackgroundTimer;
- (void)stopBackgroundTimer;
- (id)taskOrders;
- (long long)teaEventIndex;
- (id)timeSyncDicts;
- (id)timerRandomBlock;
- (void)triggerTaskWithAction:;
- (void)updateServerTime:;
- (void)updateTerminateDuration;
- (long long)userIsAuth;
- (long long)userIsLogin;
- (long long)v1GlobalIncreaseIdentifier;
- (void)setSessionID:;
- (void)setDataLength:;
- (id)sessionID;
- (id)app;
- (void)stopTimer;
- (id)init;
- (void)dealloc;
- (unsigned long long)dataLength;
- (long long)userType;
- (void)setApp:;
- (long long)uid;
- (void)start;
- (void)setConfig:;
- (void)setUid:;
- (id)key;
- (void)dispatchAsync:;
- (id)task;
- (void)setClient:;
- (BOOL)isInBackground;
- (void)startTimer;
- (void)setIv:;
- (void)onWillResignActive;
- (id)iv;
- (void)setTimer:;
- (void)setKey:;
- (void)onDidBecomeActive;
- (void)setTask:;
- (id)client;
- (void).cxx_destruct;
- (id)timer;
- (id)config;
- (id)registerPlugins;
- (id)stopSession;
- (id)runLoopObserver;
- (void)registerPlugin:;
- (id)startSession:;
- (id)pluginManager;
- (void)startBackgroundTask;
- (void)endBackgroundTask;
- (Class)tracer;
- (void)setRunLoopObserver:;
- (void)setTracer:;
- (void)removeTaskForKey:;
- (id)queueLock;
- (void)setQueueLock:;
- (id)backgroundTimer;
- (long long)sessionIndex;
- (void)setSessionIndex:;
- (long long)queueCount;
- (void)setUserType:;
- (BOOL)encrypt;
- (void)cleanData;
+ (id)shareInstance;
@end
