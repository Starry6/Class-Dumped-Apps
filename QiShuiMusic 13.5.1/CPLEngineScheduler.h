@interface CPLEngineScheduler : NSObject
@property (nonatomic) CPLEngineLibrary engineLibrary;
@property (nonatomic) @? requiredStateObserverBlock;
@property (nonatomic) @? shouldBackOffOnErrorBlock;
@property (nonatomic) Q requiredState;
@property (nonatomic) CPLPlatformObject platformObject;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (void)closeAndDeactivate:completionHandler:;
- (id)engineLibrary;
- (void)noteClientIsBeginningSignificantWork;
- (void)unblockEngineElement:;
- (id)componentName;
- (void)testKey:value:completionHandler:;
- (void)noteClientIsEndingSignificantWork;
- (void)enableSynchronizationWithReason:;
- (void)noteClientIsInForegroundQuietly:;
- (void)noteClientIsInBackground;
- (void)disableSynchronizationWithReason:;
- (void)openWithCompletionHandler:;
- (void)blockEngineElement:;
- (void)disableMingling;
- (void)getStatusWithCompletionHandler:;
- (void)unblockEngineElementOnce:;
- (void)enableMingling;
- (id)initWithEngineLibrary:;
- (void)noteScopeNeedsToPushHighPriorityToTransport;
- (BOOL)isClientInForeground;
- (void)noteClientNeedsToPull;
- (void)_stopPreparingFirstSession;
- (void)forceStartSyncSession:withMinimalPhase:;
- (void)kickOffSyncSession;
- (void)getStatusDictionaryWithCompletionHandler:;
- (void)blockAllSyncSessionsWithReason:onlyIfBlocked:block:;
- (void)_updateLastSyncDateIfNecessaryLocked;
- (void)_noteSyncSessionNeededFromStateDontRewindImmediately:;
- (void)startRequiredSyncSessionNow:;
- (void)_startSyncSession:withMinimalPhase:rewind:;
- (void)noteStoreNeedsCleanup;
- (void)noteServerIsUnavailableWithError:;
- (void)_writeFirstSynchronizationMarker;
- (void)noteClientIsInSyncWithClientCache;
- (BOOL)isSynchronizationDisabledWithReasonError:;
- (void)_enableSynchronizationWithReasonLocked:;
- (void)resetBackoffInterval;
- (void)disableSynchronizationIfBlockedWithReason:completionHandler:;
- (void)_disableFastRelaunchProtection;
- (void)_reallyUnscheduleSession;
- (void)willRunEngineElement:;
- (void)noteSyncSessionSucceeded:;
- (void)_reallyStartSyncSession:;
- (void)noteNetworkStateDidChange;
- (void)_startRequiredSyncSession:;
- (void)noteScopeNeedsToPullFromTransport;
- (id)_minimalDateForFirstSync;
- (void)_updateOverridingForeground;
- (void)noteScopeListNeedsUpdate;
- (void)noteSyncSession:stateWillBeAttempted:;
- (void)_unscheduleNextSyncSession;
- (void)noteServerMightBeAvailableNow;
- (void)_disableRetryAfterLocked;
- (void)noteQuotaHasChanged;
- (BOOL)_syncSessionIsPossible;
- (void)_reallyNoteServerHasChangesLocked;
- (void)noteStoreNeedsSetup;
- (void)noteScopeNeedsUpdate;
- (void)_resetFirstSynchronizationMarker;
- (void).cxx_destruct;
- (void)_handleResetClientCacheWithError:completionHandler:;
- (unsigned long long)requiredState;
- (void)_keepSessionInformation:;
- (void)_backOff;
- (id)shouldBackOffOnErrorBlock;
- (BOOL)isMinglingEnabled;
- (id)platformObject;
- (void)_setRequiredFirstState:;
- (void)noteSyncSession:failedDuringPhase:withError:;
- (void)noteStoreNeedsToUpdateDisabledFeatures;
- (void)_handleResetGlobalAnchorWithError:completionHandler:;
- (void)noteContainerHasBeenWiped;
- (void)_noteServerIsUnavailableWithErrorLocked:reason:;
- (void)_disableSynchronizationBecauseContainerHasBeenWipedLocked;
- (void)setShouldBackOffOnErrorBlock:;
- (void)_handleResetCloudCacheWithError:completionHandler:;
- (id)_pathToFirstSynchronizationMarker;
- (void)_handleResetAnchorWithError:completionHandler:;
- (void)noteScopeNeedsToPushToTransport;
- (void)noteTransportNeedsUpdate;
- (void)noteResourceDownloadQueueIsFull;
- (id)requiredStateObserverBlock;
- (void)_prepareFirstSession;
- (void)noteServerHasChanges;
- (void)noteClientIsNotInSyncWithClientCache;
- (void)getCurrentRequiredStateWithCompletionHandler:;
- (void)_scheduleNextSyncSession;
- (void)_noteSyncSessionNeededFromState:;
- (BOOL)waitForEngineElementToBeBlocked:timeout:;
- (void)_disableSynchronizationWithReasonLocked:;
- (void)setRequiredStateObserverBlock:;
+ (id)platformImplementationProtocol;
+ (id)validElements;
@end
