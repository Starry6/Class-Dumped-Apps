@interface EDProtectedDatabasePersistence : NSObject
@property (nonatomic) EDPersistenceDatabaseJournalManager journalManager;
@property (nonatomic) EDPersistenceHookRegistry hookRegistry;
@property (nonatomic) NSObject<OS_dispatch_queue> reconciliationQueue;
@property (nonatomic) BOOL isInitialized;
@property (nonatomic) BOOL isReconciling;
@property (nonatomic) EFLocked reconciliationMergeHandlers;
@property (nonatomic) BOOL supportsJournaling;
@property (nonatomic) BOOL protectedDataAvailable;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
@property (nonatomic) Q signpostID;
- (BOOL)isInitialized;
- (BOOL)protectedDataAvailable;
- (void)scheduleRecurringActivity;
- (unsigned long long)signpostID;
- (void)setDatabase:;
- (void)addAdditionalCriteriaToCleanupActivity:;
- (void)finishJournalReconciliation:;
- (id)journalManager;
- (void).cxx_destruct;
- (id)hookRegistry;
- (id)database;
- (BOOL)supportsJournaling;
- (id)initWithBasePath:hookRegistry:;
- (void)setIsInitialized:;
- (id)initWithJournalManager:hookRegistry:;
- (void)attachProtectedOrJournalDatabaseToConnectionIfNecessary:withSchema:;
- (void)detachProtectedOrJournalDatabaseFromConnectionIfNecessary:;
- (void)_ensureJournalIsAttachedToConnection:withSchema:;
- (void)_ensureProtectedDatabaseOrJournalIsAttachedToConnection:withSchema:;
- (BOOL)_attachProtectedDatabaseToConnection:withSchema:error:;
- (void)_detachProtectedDatabaseFromConnection:;
- (void)_attachJournalDatabaseToConnection:withSchema:;
- (void)_detachJournalDatabaseFromConnection:;
- (BOOL)_initializeDatabase:withConnection:schema:error:;
- (BOOL)_upgradeJournalWithConnection:schema:error:;
- (BOOL)_updateSqliteSequenceForDatabase:schema:withConnection:error:;
- (long long)_maxRowIDForColumn:withConnection:;
- (BOOL)_performOnDemandReconciliationForConnection:withSchema:;
- (void)reconcileJournalsWithSchema:completionBlock:;
- (unsigned long long)_reconcileJournalsWithSchema:connection:;
- (unsigned long long)_runReconciliationWithSchema:connection:;
- (unsigned long long)_mergeSchema:connection:journaledRows:newRows:;
- (unsigned long long)_mergeTable:connection:journaledRows:newRows:;
- (unsigned long long)_deleteRowIDs:fromJournal:withConnection:;
- (id)_databaseIDsToDeleteForTable:;
- (void)_deleteDatabaseIDs:fromTable:;
- (BOOL)_removeExistingDatabaseIDs:withColumn:connection:;
- (BOOL)_isJournalMalformedForSchema:connection:;
- (unsigned long long)_executeUpdateStatement:onConnection:errorMessage:;
- (unsigned long long)_executeStatementString:onConnection:errorMessage:;
- (id)_allReferencingColumnsForTable:;
- (void)registerMergeHandler:forTable:;
- (id)reconciliationQueue;
- (BOOL)isReconciling;
- (void)setIsReconciling:;
- (id)reconciliationMergeHandlers;
+ (id)log;
+ (id)signpostLog;
+ (id)journalDatabaseName;
+ (id)protectedDatabaseName;
+ (BOOL)_isRecoverableError:;
+ (unsigned long long)_resultForConnection:success:error:errorMessage:;
@end
