@interface CKModifyRecordsOperation : CKDatabaseOperation
@property (nonatomic) NSMutableArray savedRecords;
@property (nonatomic) NSMutableArray deletedRecordIDs;
@property (nonatomic) NSMutableDictionary recordsByRecordIDs;
@property (nonatomic) NSMutableDictionary recordErrors;
@property (nonatomic) NSMutableDictionary assetsByRecordIDAndRecordKey;
@property (nonatomic) BOOL shouldReportRecordsInFlight;
@property (nonatomic) NSMutableSet packagesToDestroy;
@property (nonatomic) <CKModifyRecordsOperationCallbacks> clientOperationCallbackProxy;
@property (nonatomic) CKModifyRecordsOperationInfo operationInfo;
@property (nonatomic) BOOL alwaysFetchPCSFromServer;
@property (nonatomic) BOOL shouldOnlySaveAssetContent;
@property (nonatomic) BOOL markAsParticipantNeedsNewInvitationToken;
@property (nonatomic) NSDictionary recordIDsToDeleteToEtags;
@property (nonatomic) NSDictionary conflictLosersToResolveByRecordID;
@property (nonatomic) NSDictionary pluginFieldsForRecordDeletesByID;
@property (nonatomic) @? recordsInFlightBlock;
@property (nonatomic) NSArray recordsToSave;
@property (nonatomic) NSArray recordIDsToDelete;
@property (nonatomic) q savePolicy;
@property (nonatomic) NSData clientChangeTokenData;
@property (nonatomic) BOOL atomic;
@property (nonatomic) @? perRecordProgressBlock;
@property (nonatomic) @? perRecordCompletionBlock;
@property (nonatomic) @? perRecordSaveBlock;
@property (nonatomic) @? perRecordDeleteBlock;
@property (nonatomic) @? modifyRecordsCompletionBlock;
- (void)_finishOnCallbackQueueWithError:;
- (void)setDeletedRecordIDs:;
- (BOOL)markAsParticipantNeedsNewInvitationToken;
- (void)setPluginFieldsForRecordDeletesByID:;
- (id)conflictLosersToResolveByRecordID;
- (id)pluginFieldsForRecordDeletesByID;
- (void)setPerRecordCompletionBlock:;
- (void)setConflictLosersToResolveByRecordID:;
- (id)recordIDsToDeleteToEtags;
- (BOOL)atomic;
- (id)perRecordProgressBlock;
- (id)savedRecords;
- (id)recordsInFlightBlock;
- (void)setPerRecordDeleteBlock:;
- (id)perRecordDeleteBlock;
- (id)deletedRecordIDs;
- (void)setPerRecordSaveBlock:;
- (id)initWithRecordsToSave:recordIDsToDelete:;
- (void)setSavePolicy:;
- (void)setRecordIDsToDelete:;
- (void)setPerRecordProgressBlock:;
- (id)perRecordSaveBlock;
- (id)activityCreate;
- (id)recordsToSave;
- (id)init;
- (id)clientChangeTokenData;
- (void)setClientChangeTokenData:;
- (void)setSavedRecords:;
- (void)setModifyRecordsCompletionBlock:;
- (id)recordIDsToDelete;
- (void)setRecordsToSave:;
- (long long)savePolicy;
- (void)setAtomic:;
- (id)modifyRecordsCompletionBlock;
- (void)destroyPackagesInRecords:;
- (void)setAssetsByRecordIDAndRecordKey:;
- (id)recordErrors;
- (void)handleRecordModificationForRecordID:didProgress:;
- (void)setShouldReportRecordsInFlight:;
- (void)setAlwaysFetchPCSFromServer:;
- (void)setRecordIDsToDeleteToEtags:;
- (BOOL)shouldOnlySaveAssetContent;
- (void)setShouldOnlySaveAssetContent:;
- (void)performCKOperation;
- (id)perRecordCompletionBlock;
- (void)destroyPackages:;
- (BOOL)_prepareFieldValuesForUploadWithError:;
- (void)setRecordErrors:;
- (void)setRecordsByRecordIDs:;
- (void)setRecordsInFlightBlock:;
- (void)setPackagesToDestroy:;
- (void)handleRecordIDsInFlight:reply:;
- (void)fillFromOperationInfo:;
- (void)handleSaveForRecordID:recordMetadata:error:;
- (void)setModifyRecordsCompletionBlockIVar:;
- (BOOL)shouldReportRecordsInFlight;
- (id)assetsByRecordIDAndRecordKey;
- (id)packagesToDestroy;
- (BOOL)claimPackagesInRecord:error:;
- (BOOL)hasCKOperationCallbacksSet;
- (void).cxx_destruct;
- (id)recordsByRecordIDs;
- (BOOL)alwaysFetchPCSFromServer;
- (void)setMarkAsParticipantNeedsNewInvitationToken:;
- (void)handleDeleteForRecordID:error:;
- (void)fillOutOperationInfo:;
- (BOOL)CKOperationShouldRun:;
- (void)handleRecordUploadForRecordID:recordKey:arrayIndex:signature:size:paddedFileSize:uploaded:uploadReceipt:uploadReceiptExpiration:wrappedAssetKey:clearAssetKey:referenceSignature:;
+ (void)applyDaemonCallbackInterfaceTweaks:;
@end
