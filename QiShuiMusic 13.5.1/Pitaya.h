@interface Pitaya : NSObject
@property (nonatomic) NSObject<OS_dispatch_queue> packQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> ioQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> featureQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> flTaskQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> inputQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> taskQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> globalQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> concurrentQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> databaseQueue;
- (void)setFlTaskQueue:;
- (void)setGlobalQueue:;
- (void)socketLogError:;
- (void)deepCleanWithStrategy:callback:;
- (void)setup:callback:;
- (void)appDidEnterForground:;
- (BOOL)connectSocket:startCallback:stateCallback:;
- (void)deepClean:callback:;
- (id)dictValueForSettingKey:;
- (void)downloadPackage:callback:;
- (void)downloadPakcage:callback:;
- (id)featureQueue;
- (id)flTaskQueue;
- (float)getDeepCleanSize;
- (id)globalQueue;
- (BOOL)isByteNNCoreMLSupported;
- (void)loadModules:;
- (id)loadSetupInfo;
- (void)networkNotification:;
- (id)packQueue;
- (void)preDownloadAllPackage;
- (void)queryPackage:callback:;
- (void)registerAppLogRunEventCallback:callback:;
- (void)registerMessageHandler:callback:;
- (void)releaseAllEngines;
- (void)releaseEngine:;
- (void)removeAppLogRunEventCallback:;
- (void)removeMessageHandler:;
- (void)requestUpdate:config:callback:;
- (BOOL)requestUpdateAll;
- (void)runTask:input:config:callback:;
- (void)runTaskInternal:input:config:poolStart:poolEnd:callback:;
- (void)setFeatureQueue:;
- (void)setInputQueue:;
- (void)setPackQueue:;
- (void)setupInternal:callback:;
- (void)socketLogInfo:;
- (void)socketLogWarn:;
- (void)stopAllDownloadTask;
- (void)appDidEnterBackground:;
- (BOOL)isReady;
- (id)concurrentQueue;
- (void)setTaskQueue:;
- (void)setConcurrentQueue:;
- (id)initWithHost:;
- (void).cxx_destruct;
- (id)taskQueue;
- (void)setDatabaseQueue:;
- (id)databaseQueue;
- (id).cxx_construct;
- (id)ioQueue;
- (void)setIoQueue:;
- (id)inputQueue;
+ (id)createCustomInstance;
+ (id)dictValueForSettingKey:;
+ (id)sharedInstance;
+ (BOOL)isReady;
@end
