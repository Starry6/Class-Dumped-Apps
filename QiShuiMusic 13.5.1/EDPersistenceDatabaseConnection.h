@interface EDPersistenceDatabaseConnection : NSObject
@property (nonatomic) EFSQLConnection sqlConnection;
@property (nonatomic) NSString basePath;
@property (nonatomic) NSString fullPath;
@property (nonatomic) NSString protectedDatabasePath;
@property (nonatomic) BOOL isValid;
@property (nonatomic) BOOL protectedDatabaseAttached;
@property (nonatomic) BOOL journalDatabaseAttached;
@property (nonatomic) ^{sqlite3=} sqlDB;
@property (nonatomic) BOOL isWriter;
@property (nonatomic) q lastInsertedDatabaseID;
@property (nonatomic) q transactionGeneration;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (id)init;
- (void)dealloc;
- (void)open;
- (long long)transactionTypeForWriting;
- (int)configureSQLConnection;
- (BOOL)isWriter;
- (id)sqlDB;
- (void)close;
- (BOOL)tableExists:;
- (BOOL)isValid;
- (void).cxx_destruct;
- (id)description;
- (id)preparedStatementForQueryString:;
- (void)handleSQLResult:message:;
- (BOOL)performWithOptions:transactionError:block:;
- (id)basePath;
- (id)fullPath;
- (BOOL)executeDeleteStatement:error:;
- (id)sqlConnection;
- (BOOL)executeInsertStatement:error:;
- (BOOL)executeSelectStatement:withBlock:error:;
- (BOOL)executeStatementString:errorMessage:;
- (BOOL)executeUpdateStatement:error:;
- (BOOL)executeUpdateStatement:rowsChanged:;
- (id)initWithBasePath:databaseName:isWriter:delegate:;
- (long long)transactionGeneration;
- (BOOL)databaseIsAttached:;
- (void)handleError:message:;
- (BOOL)attachProtectedDatabaseWithName:url:error:;
- (BOOL)checkForConnectionErrorWithMessage:;
- (long long)lastInsertedDatabaseID;
- (BOOL)columnExists:inTable:type:;
- (BOOL)protectedDatabaseAttached;
- (id)protectedDatabasePath;
- (BOOL)detachProtectedDatabase;
- (BOOL)tableExists:inDatabase:;
- (id)initForInMemoryDatabaseIsWriter:delegate:;
- (id)initWithSQLDB:isWriter:delegate:;
- (BOOL)executeInsertStatement:rowsChanged:;
- (BOOL)executeUpsertStatement:error:;
- (BOOL)executeUpsertStatement:rowsChanged:;
- (BOOL)executeDeleteStatement:rowsChanged:;
- (unsigned long long)countForSelectStatement:;
- (id)databaseIDsForSelectStatement:;
- (void)clearLastInsertedDatabaseID;
- (void)setIsWriter:;
- (BOOL)columnExists:inTable:database:type:;
- (BOOL)journalDatabaseAttached;
- (BOOL)attachProtectedDatabaseWithName:error:;
- (BOOL)attachProtectedDatabaseWithName:;
- (BOOL)attachJournalDatabase:withName:error:;
- (BOOL)attachJournalDatabase:withName:;
- (BOOL)detachJournalDatabase;
+ (id)log;
@end
