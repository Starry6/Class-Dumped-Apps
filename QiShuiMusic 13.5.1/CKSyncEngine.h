@interface CKSyncEngine : NSObject
@property (nonatomic) CKDatabase database;
@property (nonatomic) CKSyncEngineMetadata metadata;
@property (nonatomic) CKNotificationListener notificationListener;
@property (nonatomic) NSOperationQueue operationQueue;
@property (nonatomic) NSString apsMachServiceName;
@property (nonatomic) NSObject<OS_dispatch_queue> callbackQueue;
@property (nonatomic) Q maxRecordCountPerBatch;
@property (nonatomic) Q maxZoneCountPerBatch;
@property (nonatomic) BOOL allowMetadataCallbackDeferral;
@property (nonatomic) NSObject<OS_xpc_object> xpcActivityCriteriaOverrides;
@property (nonatomic) BOOL waitingForIdentityUpdate;
@property (nonatomic) BOOL waitingForHSA2;
@property (nonatomic) q lastKnownAccountStatus;
@property (nonatomic) q priority;
@property (nonatomic) NSString databaseSubscriptionIDOverride;
@property (nonatomic) BOOL continueModifyingPendingChangesAfterFailure;
@property (nonatomic) BOOL allowFetchAndModifyConcurrently;
@property (nonatomic) NSDate earliestStartDateForSchedulerActivities;
@property (nonatomic) BOOL useEarliestStartDateForSchedulerActivitiesInPast;
@property (nonatomic) BOOL skipRetryOnOperationError;
@property (nonatomic) BOOL automaticSyncingEnabled;
@property (nonatomic) BOOL useOpportunisticPushTopic;
@property (nonatomic) BOOL needsToReloadAccount;
@property (nonatomic) <CKSyncEngineDataSource> dataSource;
@property (nonatomic) NSArray recordIDsToSave;
@property (nonatomic) NSArray recordIDsToDelete;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (BOOL)continueModifyingPendingChangesAfterFailure;
- (id)xpcActivityCriteriaOverrides;
- (void)setAutomaticSyncingEnabled:;
- (unsigned long long)maxZoneCountPerBatch;
- (void)setAllowFetchAndModifyConcurrently:;
- (id)apsMachServiceName;
- (void)setDatabaseSubscriptionIDOverride:;
- (id)databaseSubscriptionIDOverride;
- (void)setXpcActivityCriteriaOverrides:;
- (BOOL)allowFetchAndModifyConcurrently;
- (id)existingOperationToFetchChangesForZoneIDs:group:includingExecutingOperations:;
- (void)CKDescribePropertiesUsing:;
- (void)setApsMachServiceName:;
- (void)setContinueModifyingPendingChangesAfterFailure:;
- (id)databaseSubscription;
- (id)init;
- (void)fetchChangesForZoneIDs:group:completionHandler:;
- (id)recordIDsToDelete;
- (BOOL)hasPendingModifications;
- (void)setPriority:;
- (void)dealloc;
- (void)setUseEarliestStartDateForSchedulerActivitiesInPast:;
- (BOOL)isAutomaticSyncingEnabled;
- (void)setWaitingForHSA2:;
- (void)setHasPendingModifications;
- (void)submitActivityIfNecessaryWithIdentifier:earliestStartDate:priority:userRequestedBackupTask:relatedApplicationBundleIdentifiers:;
- (long long)lastKnownAccountStatus;
- (void)relatedApplicationBundleIdentifiersForZoneIDs:recordIDs:completionHandler:;
- (id)redactedDescription;
- (id)nextBatchOfRecordsToModifyWithCustomBatchingInZoneIDs:;
- (id)nextBatchOfRecordsToModifyInZoneIDs:;
- (id)metadata;
- (id)zoneIDsToSaveInZoneIDs:;
- (BOOL)allowMetadataCallbackDeferral;
- (BOOL)useEarliestStartDateForSchedulerActivitiesInPast;
- (void)setDatabase:;
- (void)fetchChangesWithCompletionHandler:;
- (void)addRecordIDsToSave:recordIDsToDelete:;
- (id)operationQueue;
- (void)accountChangedNotification:;
- (void)performSyncActivity:completionHandler:;
- (void)fetchChangesForZoneIDs:group:ifNecessary:completionHandler:;
- (void)addRecordZonesToSave:recordZoneIDsToDelete:;
- (id)notificationListener;
- (BOOL)_isFetchChangesErrorAdopterVisible:;
- (void)setCallbackQueue:;
- (void)setSkipRetryOnOperationError:;
- (unsigned long long)maxRecordCountPerBatch;
- (id)callbackQueue;
- (void)setNeedsToReloadAccount:;
- (void)setMetadata:;
- (id)databaseSubscriptionWithID:;
- (void)updateMetadataAndNotifyDatasourceIfNecessaryForUserRecordID:;
- (void)cancelPendingOperationsWithCompletionHandler:;
- (void)didReceiveDatabaseNotification:;
- (void)fetchChangesForZoneIDs:completionHandler:;
- (id)earliestStartDateForSchedulerActivities;
- (void)setNotificationListener:;
- (BOOL)needsToReloadAccount;
- (id)existingOperationToModifyPendingChangesForZoneIDs:group:includingExecutingOperations:;
- (id)syncActivityIdentifier;
- (BOOL)skipRetryOnOperationError;
- (unsigned long long)numberOfModifyPendingRecordsOperations;
- (void)setUseOpportunisticPushTopic:;
- (id)dataSource;
- (BOOL)allowFetchAndModifyConcurrentlyForContainerIdentifier:;
- (id)userRequestedBackupActivityIdentifier;
- (id)defaultDatabaseSubscription;
- (void).cxx_destruct;
- (void)setMaxZoneCountPerBatch:;
- (void)removeRecordZonesToSave:recordZoneIDsToDelete:;
- (void)removeRecordIDsToSave:recordIDsToDelete:;
- (void)setEarliestStartDateForSchedulerActivities:;
- (void)setMaxRecordCountPerBatch:;
- (id)description;
- (void)setNeedsToFetchChanges;
- (BOOL)hasSchedulerActivityWithIdentifier:;
- (BOOL)isWaitingForIdentityUpdate;
- (void)_fetchChangesForZoneIDs:ifNecessary:operationGroup:completionHandler:;
- (id)_adopterVisibleFetchChangesErrorForZoneID:error:;
- (id)database;
- (void)modifyPendingChangesInZoneIDs:completionHandler:;
- (void)_updateDataSourceForFailedToFetchChangesForRecordZoneID:error:;
- (void)setLastKnownAccountStatus:;
- (void)modifyPendingChangesInZoneIDs:group:completionHandler:;
- (BOOL)needsToFetchChangesForZoneIDs:;
- (void)unregisterActivities;
- (void)modifyPendingChangesWithCompletionHandler:;
- (id)initWithConfiguration:;
- (BOOL)isWaitingForHSA2;
- (BOOL)useOpportunisticPushTopic;
- (id)saveSubscriptionActivityIdentifier;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:;
- (id)zoneIDsToDeleteInZoneIDs:;
- (id)defaultDatabaseSubscriptionID;
- (void)identityUpdateNotification:;
- (void)setAllowMetadataCallbackDeferral:;
- (void)networkAttributionBundleIDForZoneIDs:recordIDs:completionHandler:;
- (id)recordIDsToSave;
- (void)setWaitingForIdentityUpdate:;
- (void)setOperationQueue:;
- (long long)priority;
+ (void)setFastErrorRetry:;
+ (id)saveSubscriptionActivityIdentifierInDatabase:ignoringSystemConditions:;
+ (id)syncActivityIdentifierInDatabase:ignoringSystemConditions:;
+ (id)earliestStartDateAfterError:;
+ (void)unregisterActivitiesWithDatabase:ignoringSystemConditions:;
+ (BOOL)shouldDeferAfterError:;
+ (BOOL)fastErrorRetry;
@end
