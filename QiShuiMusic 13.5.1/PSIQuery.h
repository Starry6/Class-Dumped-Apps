@interface PSIQuery : NSObject
@property (nonatomic) Q mergeFilterTokenAssetIDsIntervalID;
@property (nonatomic) BOOL useWildcardText;
@property (nonatomic) NSDictionary substitutions;
@property (nonatomic) NSArray nextKeywordSuggestions;
@property (nonatomic) NSSet sceneIdentifiers;
@property (nonatomic) NSArray dedupedGroupResults;
@property (nonatomic) NSSet socialGroupExtendedAssetIds;
@property (nonatomic) NSSet socialGroupExtendedCollectionIds;
@property (nonatomic) PSITokenizer tokenizer;
@property (nonatomic) BOOL enableImplicitTokenization;
@property (nonatomic) BOOL implicitTokenizationUsePrefixMatch;
@property (nonatomic) BOOL implicitTokenizationLastTokenUsesPrefixMatch;
@property (nonatomic) BOOL preventUnnecessaryImplicitTokenization;
@property (nonatomic) BOOL exactMatchIgnoreUntokenizedCharacters;
@property (nonatomic) NSArray queryTokens;
@property (nonatomic) NSString searchText;
@property (nonatomic) BOOL canceled;
@property (nonatomic) Q wordEmbeddingMode;
@property (nonatomic) BOOL usesPrefixBasedWordEmbedding;
@property (nonatomic) Q numberOfNextKeywordSuggestionToProcess;
@property (nonatomic) BOOL calculateTokenCounts;
@property (nonatomic) BOOL lastImplicitTokenAllowsWordEmbeddings;
@property (nonatomic) BOOL implicitTokenizationIncludeBaseParseResults;
@property (nonatomic) Q libraryScope;
- (void)bootstrap;
- (BOOL)isCanceled;
- (void)cancel;
- (id)suggestionWhitelistedScenes;
- (id)tokenizer;
- (void).cxx_destruct;
- (id)searchText;
- (id)description;
- (id)queryTokens;
- (unsigned long long)libraryScope;
- (void)setLibraryScope:;
- (BOOL)_enumerateImplicitlyTokenizedParsesWithBaseParse:usingBlock:;
- (id)implicitlyTokenizedParsesWithBaseParse:;
- (BOOL)implicitTokenizationIncludeBaseParseResults;
- (id)initWithQueryTokens:searchText:useWildcardText:delegate:libraryScope:;
- (void)runWithResultsHandler:;
- (id)_idsOfGroupsMatchingString:categories:textIsSearchable:isFilterTypeToken:;
- (id)_idsOfGroupsMatchingToken:;
- (void)processImplicitTokenization;
- (void)processDates;
- (void)processWordEmbeddings;
- (BOOL)recursiveAddToGroupResults:aggregate:atIndex:outOf:inGroupArrays:dateFilter:datedTokens:;
- (id)processParse:;
- (void)computeSuggestions;
- (void)enumerateParsesWithMode:usingBlock:;
- (void)_postProcessPersonGroupsInGroupArrays:;
- (unsigned long long)wordEmbeddingMode;
- (void)setWordEmbeddingMode:;
- (BOOL)usesPrefixBasedWordEmbedding;
- (id)substitutions;
- (void)setSubstitutions:;
- (unsigned long long)numberOfNextKeywordSuggestionToProcess;
- (void)setNumberOfNextKeywordSuggestionToProcess:;
- (id)nextKeywordSuggestions;
- (void)setNextKeywordSuggestions:;
- (id)sceneIdentifiers;
- (void)setSceneIdentifiers:;
- (BOOL)calculateTokenCounts;
- (BOOL)enableImplicitTokenization;
- (void)setEnableImplicitTokenization:;
- (BOOL)implicitTokenizationUsePrefixMatch;
- (void)setImplicitTokenizationUsePrefixMatch:;
- (BOOL)implicitTokenizationLastTokenUsesPrefixMatch;
- (void)setImplicitTokenizationLastTokenUsesPrefixMatch:;
- (BOOL)preventUnnecessaryImplicitTokenization;
- (void)setPreventUnnecessaryImplicitTokenization:;
- (BOOL)exactMatchIgnoreUntokenizedCharacters;
- (void)setExactMatchIgnoreUntokenizedCharacters:;
- (BOOL)lastImplicitTokenAllowsWordEmbeddings;
- (id)dedupedGroupResults;
- (void)setDedupedGroupResults:;
- (id)socialGroupExtendedAssetIds;
- (void)setSocialGroupExtendedAssetIds:;
- (id)socialGroupExtendedCollectionIds;
- (void)setSocialGroupExtendedCollectionIds:;
- (unsigned long long)mergeFilterTokenAssetIDsIntervalID;
- (void)setMergeFilterTokenAssetIDsIntervalID:;
- (BOOL)useWildcardText;
+ (void)bootstrap;
+ (id)searchTextExtendedRangeForParse:;
+ (id)dateFilterWithAttributes:;
+ (id)dateFilterByCombiningDateFilter:withDateFilter:;
+ (id)dateFilterWithAttributes:andAttributes:;
+ (id)parsedDatesFromText:;
+ (id)dateAttributesFromToken:;
+ (BOOL)tokenIsEligibleForDateParsing:;
+ (BOOL)enumerateDatedParsesWithParse:currentTokenIndex:potentialComboAttributes:usingBlock:;
+ (id)datedParsesWithParses:;
+ (id)_combineOCRGroups:usingSearchTokens:;
+ (BOOL)_shouldApplyFilterTokensForGroupArrays:searchTokens:filterGroupIds:;
+ (void)_aggregateAssetIdsOnFilterGroupsInGroupArrays:searchTokens:groupIdToOriginalAssetIdsMap:;
+ (id)_indexesToRemoveForDuplicatedFilterGroupsinGroupArrays:searchTokens:;
+ (id)_indexesOfFilterTokensInSearchTokens:;
+ (void)_restoreAssetIdsForGroupsInGroupArrays:atRemovalIndexes:groupIdToOriginalAssetIdsMap:searchTokens:;
@end
