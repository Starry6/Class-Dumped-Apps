@interface GEOComposedRoute : NSObject
@property (nonatomic) double _hypothesis_travelDuration;
@property (nonatomic) double _hypothesis_travelDurationAggressiveEstimate;
@property (nonatomic) double _hypothesis_travelDurationConservativeEstimate;
@property (nonatomic) Q serverIdentifier;
@property (nonatomic) NSData serverRouteID;
@property (nonatomic) NSUUID uniqueRouteID;
@property (nonatomic) GEORouteInitializerData routeInitializerData;
@property (nonatomic) GEORouteAttributes routeAttributes;
@property (nonatomic) NSArray etauPositions;
@property (nonatomic) I pointCount;
@property (nonatomic) {PolylineCoordinate=If} endRouteCoordinate;
@property (nonatomic) BOOL usesZilch;
@property (nonatomic) BOOL usesRoutingPathPoints;
@property (nonatomic) GEOComposedWaypoint origin;
@property (nonatomic) GEOComposedWaypoint destination;
@property (nonatomic) NSArray waypoints;
@property (nonatomic) BOOL isNavigable;
@property (nonatomic) NSData directionsResponseID;
@property (nonatomic) NSData etauResponseID;
@property (nonatomic) Q indexInResponse;
@property (nonatomic) NSArray legs;
@property (nonatomic) NSArray segments;
@property (nonatomic) NSArray steps;
@property (nonatomic) NSArray enrouteNotices;
@property (nonatomic) NSArray composedGuidanceEvents;
@property (nonatomic) NSArray visualInfos;
@property (nonatomic) NSArray cameraInfos;
@property (nonatomic) NSArray stops;
@property (nonatomic) NSArray halls;
@property (nonatomic) NSArray stations;
@property (nonatomic) NSString name;
@property (nonatomic) <GEOServerFormattedString> routeLabelDescription;
@property (nonatomic) <GEOTransitArtworkDataSource> routeLabelArtwork;
@property (nonatomic) NSArray advisories;
@property (nonatomic) NSArray routeDescriptions;
@property (nonatomic) NSString trafficDescription;
@property (nonatomic) NSString longTrafficDescription;
@property (nonatomic) GEORouteRestrictionZoneInfo restrictionZoneInfo;
@property (nonatomic) <GEOServerFormattedString> infrastructureDescription;
@property (nonatomic) Q stepsCount;
@property (nonatomic) BOOL isNewProtocolRoute;
@property (nonatomic) GEOWaypointRoute geoWaypointRoute;
@property (nonatomic) BOOL hasArrivalMapRegion;
@property (nonatomic) GEOMapRegion arrivalMapRegion;
@property (nonatomic) BOOL hasExpectedTime;
@property (nonatomic) I expectedTime;
@property (nonatomic) BOOL hasHistoricTravelTime;
@property (nonatomic) I historicTravelTime;
@property (nonatomic) double freeflowTravelTime;
@property (nonatomic) double travelTimeAggressiveEstimate;
@property (nonatomic) double travelTimeConservativeEstimate;
@property (nonatomic) double chargingDuration;
@property (nonatomic) double travelAndChargingDuration;
@property (nonatomic) NSDate startDate;
@property (nonatomic) double distance;
@property (nonatomic) double pointLength;
@property (nonatomic) BOOL avoidsTolls;
@property (nonatomic) BOOL avoidsHighways;
@property (nonatomic) BOOL avoidsTraffic;
@property (nonatomic) BOOL maneuverDisplayEnabled;
@property (nonatomic) Q currentDisplayStep;
@property (nonatomic) NSArray maneuverDisplaySteps;
@property (nonatomic) Q selectedSegmentIndex;
@property (nonatomic) I firstVisiblePoint;
@property (nonatomic) NSInteger transportType;
@property (nonatomic) GEOTransitSuggestedRoute suggestedRoute;
@property (nonatomic) GEOTransitSuggestedRoute originalSuggestedRoute;
@property (nonatomic) Q indexOfSuggestedRoute;
@property (nonatomic) NSArray routePlanningArtworks;
@property (nonatomic) <GEOTransitRoutingIncidentMessage> transitRoutingIncidentMessage;
@property (nonatomic) BOOL hasRideClusters;
@property (nonatomic) NSArray rideSelections;
@property (nonatomic) <GEOServerFormattedString> launchAndGoCardTitle;
@property (nonatomic) <GEOServerFormattedString> launchAndGoRouteTitle;
@property (nonatomic) <GEOServerFormattedString> launchAndGoRouteDescription;
@property (nonatomic) <GEOServerFormattedString> previewDurationFormatString;
@property (nonatomic) <GEOServerFormattedString> pickingDurationFormatString;
@property (nonatomic) <GEOServerFormattedString> planningDescriptionFormatString;
@property (nonatomic) <GEOServerFormattedString> planningDistanceFormatString;
@property (nonatomic) NSString planningSeparatorString;
@property (nonatomic) <GEOServerFormattedString> transitDescriptionFormatString;
@property (nonatomic) BOOL isEVRoute;
@property (nonatomic) BOOL isWalkingOnlyTransitRoute;
@property (nonatomic) <GEOServerFormattedString> transitRouteBadge;
@property (nonatomic) double transitUpdateInitialDelay;
@property (nonatomic) GEOElevationProfile elevationProfile;
@property (nonatomic) GEORouteDisplayHints displayHints;
@property (nonatomic) BOOL shouldShowSchedule;
@property (nonatomic) GEOStyleAttributes styleAttributes;
@property (nonatomic) GEOComposedRouteTraffic traffic;
@property (nonatomic) GEOComposedRouteMutableData mutableData;
@property (nonatomic) NSArray transitPaymentMethods;
@property (nonatomic) NSInteger routeType;
@property (nonatomic) NSArray sections;
@property (nonatomic) GEOMapRegion boundingMapRegion;
@property (nonatomic) Q numberOfTransitStops;
@property (nonatomic) GEOTransitRouteUpdateRequest transitRouteUpdateRequest;
@property (nonatomic) NSUUID revisionIdentifier;
@property (nonatomic) NSArray baseTransitFares;
@property (nonatomic) BOOL allowsNetworkTileLoad;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (id)_mapPoints;
- (void)findDivergenceAndConvergenceWithRoute:outDivergenceCoordinate:outConvergenceCoordinate:;
- (void)findDivergenceAndConvergenceWithRoute:distanceInMeters:outDivergenceCoordinate:outConvergenceCoordinate:;
- (id)divergenceAndConvergenceWithRoute:;
- (id)divergenceAndConvergenceWithRoute:outOtherRoutePoints:;
- (BOOL)_isNavigableForWatch;
- (BOOL)isMultipointRoute;
- (id)userRequestedWaypoints;
- (id)_navigation_rootBoundingSection;
- (id)_navigation_boundingSectionForRange:leafIndex:;
- (id)_navigation_leafBoundingSectionForRouteCoordinate:;
- (id)_navigation_leafBoundingSectionsIntersectingSection:;
- (id)_navigation_leafBoundingSectionsIntersectingSection:paddingMapPoints:;
- (id)_navigation_allLeafBoundingSections;
- (id)sections;
- (id)steps;
- (double)distance;
- (id)segments;
- (id)startDate;
- (id)init;
- (double)chargingDuration;
- (void)setMutableData:;
- (void)dealloc;
- (id)mutableData;
- (id)revisionIdentifier;
- (int)routeType;
- (int)transportType;
- (id)destination;
- (void)setRevisionIdentifier:;
- (id)initWithCoder:;
- (id)traffic;
- (BOOL)isEVRoute;
- (id)debugDescription;
- (id)origin;
- (void)setSegments:;
- (void)encodeWithCoder:;
- (void).cxx_destruct;
- (void)setSections:;
- (id)description;
- (id)waypoints;
- (id)name;
- (void)setSteps:;
- (id)boundingMapRegion;
- (void)unregisterObserver:;
- (id)styleAttributes;
- (void)registerObserver:;
- (unsigned long long)selectedSegmentIndex;
- (void)setSelectedSegmentIndex:;
- (id)coordinates;
- (id)stations;
- (id)stops;
- (id)halls;
- (unsigned long long)stepsCount;
- (id)stepAtIndex:;
- (id)legs;
- (id)routePlanningArtworks;
- (double)travelTimeAggressiveEstimate;
- (double)travelTimeConservativeEstimate;
- (BOOL)allowsNetworkTileLoad;
- (id)initWithGeoWaypointRoute:initializerData:;
- (id)initWithTransitGeometry:andLine:andStops:;
- (id)initWithSuggestedRoute:initializerData:;
- (id)initWithSuggestedRoute:initializerData:updateRequest:;
- (id)initWithSuggestedRoute:initializerData:uniqueRouteID:;
- (void)_initOtherRouteFeatures:initializerData:;
- (void)_initAdvisoriesForRoute:initializerData:;
- (void)_ingestRouteBuilderOutput:;
- (void)_populateArtworkForSuggestedRoute:decoderData:;
- (void)_enumerateAllStepsWithBlock:;
- (BOOL)_MapsCarPlay_isEqual:;
- (id)routeInitializerData;
- (id)routeAttributes;
- (unsigned long long)indexOfSuggestedRoute;
- (BOOL)isNewProtocolRoute;
- (double)travelAndChargingDuration;
- (double)pointLength;
- (void)setIsWalkingOnlyTransitRoute:;
- (id)lastEVStep;
- (id)lastEVStepInLegWithIndex:;
- (id)waypointsFromRouteCoordinate:;
- (void)setComposedGuidanceEvents:;
- (void)setBoundingMapRegion:;
- (void)setIsNavigable:;
- (id)routeDescriptions;
- (unsigned long long)numberOfTransitStops;
- (id)baseTransitFares;
- (BOOL)hasInitialPromptType:;
- (id)transitPaymentMethods;
- (void)_initializeManeuverDisplaySteps;
- (void)setManeuverDisplaySteps:;
- (void)setCurrentDisplayStep:;
- (unsigned int)pointCount;
- (id)endRouteCoordinate;
- (BOOL)usesRoutingPathPoints;
- (id)pointAt:;
- (id)coordinateAtOffset:;
- (id)pointAtRouteCoordinate:;
- (id)coordinateAtOffset:fromRoutePoint:;
- (id)coordinateAtOffset:fromRouteCoordinate:;
- (id)routeCoordinateAtDistance:beforeRouteCoordinate:;
- (double)distanceFromPoint:toPoint:;
- (double)distanceFromPointIndex:toPointIndex:;
- (double)stepDistanceFromPoint:toPoint:;
- (id)closestPointOnRoute:;
- (id)stepForPointIndex:;
- (unsigned long long)stepIndexForPointIndex:;
- (unsigned long long)segmentIndexForPointIndex:;
- (int)estimatedCellularCoverageForOffset:;
- (void)enumerateCellularCoverageRangesWithBlock:;
- (unsigned long long)segmentIndexForStepIndex:;
- (id)segmentForStepIndex:;
- (id)segmentForPointIndex:;
- (unsigned long long)legIndexForStepIndex:;
- (unsigned long long)lastStepIndexOfLegAtStepIndex:;
- (BOOL)hasArrivalMapRegion;
- (id)arrivalMapRegion;
- (BOOL)hasExpectedTime;
- (BOOL)hasHistoricTravelTime;
- (void)maneuverDisplayHasChanged;
- (void)getFormOfWay:roadClass:at:;
- (int)formOfWayAt:;
- (id)roadFeatureAtPointIndex:;
- (int)transportTypeForStep:;
- (id)zilchDataFromStepIndex:;
- (id)zilchDataArrayToEndOfRouteFromStepIndex:;
- (id)routingPathDataFromStart:;
- (double)distanceBetweenRoutePointIndex:toPointIndex:;
- (double)distanceBetweenLocation:nextPointIndex:toPointIndex:;
- (double)distanceBetweenStep:andStep:;
- (double)remainingTimeAlongRouteFromStepIndex:currentStepRemainingDistance:;
- (double)remainingTimeToEndOfLeg:currentStepRemainingDistance:;
- (double)remainingDistanceToEndOfLeg:currentStepRemainingDistance:;
- (double)remainingDistanceAlongRouteFromStepIndex:currentStepRemainingDistance:;
- (BOOL)checkDrivingArrivalForCoordinate:coordinateOnRoute:routePointIndex:distanceFromRoute:arrivalMapRegion:checkArrivalRadius:checkDistanceAlongRoute:checkRoadAccessPoints:isOnRoute:;
- (double)courseAtRouteCoordinateIndex:;
- (id)locationAtDistance:from:;
- (id)routeMatchAtDistance:from:stopAtEndOfTunnel:stopAtEndOfManeuver:date:;
- (id)_findRouteCoordinateWithOffset:aPos:aCoord:bCoord:pointOnSegment:bounds:;
- (void)roadFeaturesForRouteCoordinate:distanceAhead:handler:;
- (id)geoTrafficBannerText;
- (BOOL)_meetsMinimumPathLengthBetweenStart:end:;
- (void)_addSnappedPolylinePathsForSection:toPaths:rects:rectsCount:;
- (void)_snapPaths:completionHandler:;
- (void)_addPaths:forObserver:;
- (BOOL)supportsSnapping;
- (id)getSnappedPathsForVisibleRect:rectsToSnap:rectsToSnapCount:observer:completionHandler:;
- (id)getSnappedPathsForVisibleRect:rectsToSnap:rectsToSnapCount:observer:;
- (id)getSnappedPathsForLocation:radius:observer:;
- (void)clearPoints;
- (void)clearSnappedPathsForObserver:;
- (void)forEachSnappedPath:;
- (BOOL)isSnapping;
- (void)applyUpdatesToTransitRoute:;
- (void)updateTransitRouteUpdateRequest:;
- (BOOL)shouldShowSchedule;
- (id)getHallForStop:;
- (id)getStationForHall:;
- (id)getStationForStop:;
- (BOOL)isStopInTerminalStructure:;
- (id)previewDurationFormatString;
- (id)pickingDurationFormatString;
- (id)planningDescriptionFormatString;
- (id)transitDescriptionFormatString;
- (id)transitRouteBadge;
- (void)_updateRevisionIdentifier;
- (BOOL)hasRideClusters;
- (id)_nextOptionForOption:rideIndex:;
- (unsigned long long)_tripIndexForTripSegment:;
- (id)sectionOptionForTripIndex:;
- (id)sectionOptionForTripSegment:;
- (id)boardStepForSection:;
- (void)selectRide:forTripSegment:;
- (void)selectRide:forBoardStep:;
- (void)_rebuildRouteForRideChange;
- (void)updateRouteWithRideSelections:;
- (id)ticketingSegmentsForSelectedRides;
- (unsigned int)laneCountAtRouteCoordinate:;
- (id)geoWaypointRoute;
- (unsigned long long)serverIdentifier;
- (id)uniqueRouteID;
- (void)setUniqueRouteID:;
- (unsigned long long)currentDisplayStep;
- (BOOL)maneuverDisplayEnabled;
- (void)setManeuverDisplayEnabled:;
- (id)maneuverDisplaySteps;
- (unsigned int)firstVisiblePoint;
- (void)setFirstVisiblePoint:;
- (BOOL)usesZilch;
- (id)composedGuidanceEvents;
- (id)enrouteNotices;
- (id)visualInfos;
- (id)cameraInfos;
- (id)serverRouteID;
- (void)setServerRouteID:;
- (unsigned int)expectedTime;
- (unsigned int)historicTravelTime;
- (double)freeflowTravelTime;
- (id)routeLabelDescription;
- (id)routeLabelArtwork;
- (id)trafficDescription;
- (id)longTrafficDescription;
- (id)restrictionZoneInfo;
- (id)infrastructureDescription;
- (BOOL)avoidsTolls;
- (BOOL)avoidsHighways;
- (BOOL)avoidsTraffic;
- (id)suggestedRoute;
- (void)setSuggestedRoute:;
- (id)originalSuggestedRoute;
- (id)transitRoutingIncidentMessage;
- (id)rideSelections;
- (id)displayHints;
- (id)launchAndGoCardTitle;
- (id)launchAndGoRouteTitle;
- (id)launchAndGoRouteDescription;
- (id)planningDistanceFormatString;
- (id)planningSeparatorString;
- (id)advisories;
- (BOOL)isWalkingOnlyTransitRoute;
- (double)transitUpdateInitialDelay;
- (void)setTransitUpdateInitialDelay:;
- (id)directionsResponseID;
- (id)etauResponseID;
- (unsigned long long)indexInResponse;
- (BOOL)isNavigable;
- (id)elevationProfile;
- (void)setTransitPaymentMethods:;
- (id)transitRouteUpdateRequest;
- (id)etauPositions;
- (double)distanceFromStartToIndex:;
- (double)distanceToEndFromIndex:;
- (double)distanceBetweenIndex:andIndex:;
- (double)distanceFromStartToRouteCoordinate:;
- (double)distanceToEndFromRouteCoordinate:;
- (double)distanceBetweenRouteCoordinate:andRouteCoordinate:;
- (id)routeCoordinateForDistanceAfterStart:;
- (id)routeCoordinateForDistanceBeforeEnd:;
- (id)routeCoordinateForDistance:afterRouteCoordinate:;
- (id)routeCoordinateForDistance:beforeRouteCoordinate:;
- (unsigned long long)stepIndexForRouteCoordinate:;
- (unsigned long long)segmentIndexForRouteCoordinate:;
- (unsigned long long)legIndexForRouteCoordinate:;
- (id)initWithCompanionRoute:;
- (void)applyCompanionUpdates:;
- (double)_hypothesis_travelDuration;
- (double)_hypothesis_travelDurationAggressiveEstimate;
- (double)_hypothesis_travelDurationConservativeEstimate;
- (double)_hypothesis_travelDurationFromStep:stepRemainingDistance:;
- (id)geoOriginalWaypointRouteFromRouteCoordinate:purpose:;
- (id)geoOriginalWaypointRouteFromRouteCoordinate:purpose:origin:startPathSegment:;
- (id)geoETAWaypointRoute;
- (id)geoETAWaypointRouteFromRouteCoordinate:includeOriginWaypointInfo:startPathSegment:;
- (void)iterateTravelTimeRangesFromRouteCoordinate:etaRoute:handler:;
- (double)remainingTimeToEndOfCurrentLegFrom:etaRoute:;
- (double)remainingTimeToEndOfRouteFrom:etaRoute:;
- (id)truncatedTrafficFromRouteCoordinate:;
- (id)_geoETAWaypointRouteWithZilchFromRouteCoordinate:;
- (void)_iterateTravelTimeRangesForStep:handler:;
+ (BOOL)pointsDiverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:;
+ (BOOL)_pointsDiverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:;
+ (BOOL)pointsConverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:;
+ (BOOL)_pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:;
+ (BOOL)_pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinatesA:outCoordinatesB:;
+ (void)findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outCoordinatesA:outCoordinatesB:;
+ (void)findDivergenceAndConvergence:pointCount:otherCoordinates:pointCount:distanceInMeters:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:;
+ (void)findDivergenceAndConvergence:pointCount:otherPoints:pointCount:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:;
+ (void)_findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:;
+ (unsigned long long)_startIndexForPoints:withPoints:pointCount:toleranceSquared:;
+ (void)_addPointsToArray:forMapPoints:pointCount:isPolylineA:;
+ (id)_stringForPoint:;
+ (BOOL)supportsSecureCoding;
@end
