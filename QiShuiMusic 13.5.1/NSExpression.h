@interface NSExpression : NSObject
@property (nonatomic) Q expressionType;
@property (nonatomic) @ constantValue;
@property (nonatomic) NSString keyPath;
@property (nonatomic) NSString function;
@property (nonatomic) NSString variable;
@property (nonatomic) NSExpression operand;
@property (nonatomic) NSArray arguments;
@property (nonatomic) @ collection;
@property (nonatomic) NSPredicate predicate;
@property (nonatomic) NSExpression leftExpression;
@property (nonatomic) NSExpression rightExpression;
@property (nonatomic) NSExpression trueExpression;
@property (nonatomic) NSExpression falseExpression;
@property (nonatomic) @? expressionBlock;
- (id)minimalFormInContext:;
- (id)_keypathsForDerivedPropertyValidation:;
- (id)cksqlcs_appendSQLToString:statement:;
- (BOOL)cksqlcs_isNil;
- (id)CKExpressionValue;
- (BOOL)br_isKeyPathExpression:;
- (BOOL)br_isConstantValueExpression:;
- (SEL)selector;
- (id)constantValue;
- (id)collection;
- (void)acceptVisitor:flags:;
- (id)arguments;
- (id)function;
- (id)predicateFormat;
- (BOOL)_allowsEvaluation;
- (void)allowEvaluation;
- (id)initWithCoder:;
- (id)_expressionWithSubstitutionVariables:;
- (id)variable;
- (id)predicate;
- (void)encodeWithCoder:;
- (id)keyPath;
- (id)description;
- (id)expressionValueWithObject:context:;
- (id)copyWithZone:;
- (id)initWithExpressionType:;
- (id)leftExpression;
- (id)rightExpression;
- (unsigned long long)expressionType;
- (id)operand;
- (id)subexpression;
- (id)trueExpression;
- (id)falseExpression;
- (id)expressionBlock;
- (BOOL)_shouldUseParensWithDescription;
+ (BOOL)supportsSecureCoding;
+ (id)expressionWithFormat:arguments:;
+ (id)expressionForKeyPath:;
+ (id)expressionWithFormat:argumentArray:;
+ (id)expressionWithFormat:;
+ (id)expressionForConstantValue:;
+ (id)expressionForEvaluatedObject;
+ (id)expressionForVariable:;
+ (id)expressionForSymbolicString:;
+ (id)expressionForAggregate:;
+ (id)expressionForSubquery:usingIteratorVariable:predicate:;
+ (id)expressionForFunction:selectorName:arguments:;
+ (id)expressionForVariableNameAssignment:expression:;
+ (id)expressionForTernaryWithPredicate:trueExpression:falseExpression:;
+ (id)expressionForConditional:trueExpression:falseExpression:;
+ (id)_newKeyPathExpressionForString:;
+ (id)expressionForFunction:arguments:;
+ (id)expressionForUnionSet:with:;
+ (id)expressionForIntersectSet:with:;
+ (id)expressionForMinusSet:with:;
+ (id)expressionForBlock:arguments:;
+ (id)expressionForAnyKey;
@end
