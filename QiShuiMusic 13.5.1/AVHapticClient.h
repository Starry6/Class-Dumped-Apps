@interface AVHapticClient : NSObject
@property (nonatomic) BOOL connected;
@property (nonatomic) Q clientID;
@property (nonatomic) NSArray channelKeys;
@property (nonatomic) BOOL prewarmed;
@property (nonatomic) BOOL running;
@property (nonatomic) NSInteger state;
@property (nonatomic) NSInteger serverProcessID;
@property (nonatomic) double hapticLatency;
@property (nonatomic) @? asyncStopCallback;
@property (nonatomic) @? completionCallback;
@property (nonatomic) @? connectionCallback;
@property (nonatomic) BOOL disconnecting;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (void)setConnected:;
- (BOOL)connected;
- (void)dealloc;
- (void)setState:;
- (BOOL)finish:;
- (void)disconnect;
- (BOOL)running;
- (void)setCompletionCallback:;
- (int)state;
- (void)releaseResources;
- (void).cxx_destruct;
- (void)stopPrewarm;
- (void)allocateResources:;
- (void)prewarm:;
- (unsigned long long)clientID;
- (id).cxx_construct;
- (void)stopRunning;
- (BOOL)loadHapticEvent:reply:;
- (BOOL)createCustomAudioEvent:format:frames:options:reply:;
- (BOOL)copyCustomAudioEvent:options:reply:;
- (BOOL)referenceCustomAudioEvent:reply:;
- (BOOL)releaseCustomAudioEvent:reply:;
- (void)startRunning:;
- (void)stopRunning:;
- (id)getAsyncDelegateForMethod:errorHandler:;
- (id)getSyncDelegateForMethod:errorHandler:;
- (void)sequenceFinished:error:;
- (void)clientCompletedWithError:;
- (void)clientStoppedForReason:error:;
- (void)clientDisconnectingForReason:error:;
- (id)initWithOptions:error:;
- (id)completionCallback;
- (BOOL)prewarmed;
- (void)queryServerCapabilities:reply:;
- (double)hapticLatency;
- (void)expectNotifyAfter:;
- (BOOL)setChannelEventBehavior:channel:;
- (BOOL)resetChannel:atTime:;
- (BOOL)doSendEvents:withImmediateParameters:atTime:channel:sorted:outToken:error:;
- (BOOL)doScheduleParamCurve:atTime:channel:paramCurve:error:;
- (BOOL)doScheduleParamCurveWithMemoryReserve:atTime:channel:memoryReserve:paramCurve:error:;
- (BOOL)sendEvents:withImmediateParameters:atTime:channel:outToken:error:;
- (BOOL)clearEventsFromTime:channel:;
- (BOOL)setParameter:atTime:value:channel:;
- (BOOL)scheduleParameterCurve:curve:atTime:channel:error:;
- (BOOL)loadAndPrepareHapticSequenceFromData:reply:;
- (BOOL)loadAndPrepareHapticSequenceFromEvents:reply:;
- (BOOL)loadAndPrepareHapticSequenceFromVibePattern:reply:;
- (BOOL)setSequenceEventBehavior:behavior:channel:;
- (void)setSequenceFinishedHandlerForID:finishedHandler:;
- (id)getSequenceFinishedHandlerForID:;
- (void)callSequenceFinishedHandlersWithError:;
- (void)setRunStateForSequenceEntryWithID:running:;
- (void)detachSequenceEntryforID:;
- (BOOL)prepareHapticSequence:error:;
- (BOOL)enableSequenceLooping:enable:error:;
- (BOOL)setSequenceLoopLength:length:error:;
- (BOOL)setSequencePlaybackRate:rate:error:;
- (BOOL)startHapticSequence:atTime:withOffset:;
- (BOOL)stopHapticSequence:atTime:;
- (BOOL)pauseHapticSequence:atTime:;
- (BOOL)resumeHapticSequence:atTime:;
- (BOOL)seekHapticSequence:toTime:;
- (BOOL)resetHapticSequence:atTime:;
- (BOOL)sendUnduckAudioCommand:atTime:;
- (BOOL)setSequenceChannelParameter:atTime:value:sequenceID:channel:;
- (BOOL)clearSequenceEvents:atTime:;
- (void)detachHapticSequence:;
- (void)doInit;
- (BOOL)setupConnectionWithOptions:error:;
- (void)setChannelKeys:;
- (BOOL)setPlayerBehavior:error:;
- (void)clearAssignedChannels;
- (BOOL)requestAssignedChannels:error:;
- (BOOL)removeAssignedChannelID:error:;
- (void)handleServerConnectionInterruption;
- (void)handleServerConnectionInvalidation;
- (unsigned int)calculateHapticCommandParamCurveMemorySize:;
- (void)destroySharedMemory;
- (id)channelKeys;
- (id)connectionCallback;
- (void)setConnectionCallback:;
- (BOOL)disconnecting;
- (int)serverProcessID;
- (void)setServerProcessID:;
- (id)asyncStopCallback;
- (void)setAsyncStopCallback:;
@end
