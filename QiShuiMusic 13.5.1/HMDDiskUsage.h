@interface HMDDiskUsage : NSObject
@property (nonatomic) NSMutableDictionary outDatedfilesDictionary;
@property (nonatomic) NSMutableArray allFileList;
@property (nonatomic) NSMutableArray abnormalFolders;
@property (nonatomic) NSArray ignoredRelativePathes;
@property (nonatomic) q folderSpace;
@property (nonatomic) q abnormalFolderSize;
@property (nonatomic) q abnormalFolderFileNumber;
@property (nonatomic) double outdatedDays;
@property (nonatomic) double sparseFileLeastDifferPercentage;
@property (nonatomic) Q sparseFileLeastDifferSize;
@property (nonatomic) BOOL checkSparseFile;
@property (nonatomic) NSHashTable visitors;
@property (nonatomic) NSString currenFolderPath;
@property (nonatomic) BOOL isProcessExit;
@property (nonatomic) Q minCollectSize;
@property (nonatomic) NSMutableSet hardLinkSet;
@property (nonatomic) @? switchBlock;
- (BOOL)checkSparseFile;
- (id)getOutDateFiles;
- (double)getThisAppSpace;
- (id)initWithFolderPath:switchBlock:;
- (void)setAllFileList:;
- (void)setSwitchBlock:;
- (double)sparseFileLeastDifferPercentage;
- (id)abnormalFolders;
- (id)getExceptionFoldersWithTopRank:;
- (void)setFolderSpace:;
- (void)setHardLinkSet:;
- (long long)abnormalFolderFileNumber;
- (long long)abnormalFolderSize;
- (id)allFileList;
- (void)calculateExceptionFilesAtFolderPath:folderSize:isAbnormal:fileCount:;
- (id)calculateOutDateFilesAtPath:fileSize:isOutdated:fileCount:;
- (void)calculateTopFiles:fileSize:;
- (id)currenFolderPath;
- (void)currentProcessExit;
- (unsigned long long)folderSizeAtPath:isAbnormal:isOutdated:;
- (long long)folderSpace;
- (id)getAPPBundlePath;
- (id)getAPPHomeDirectory;
- (id)getAppFileListForTopRank:;
- (long long)getCurrenFolderSpace;
- (id)getCurrentFileListForTopRank:;
- (id)getExceptionFolders;
- (id)getFileAccessLastDateAtPath:;
- (id)getFileListsAtPath:forTopRank:;
- (id)getOutDateFilesWithTopRank:;
- (id)hardLinkSet;
- (id)ignoredRelativePathes;
- (id)initWithOutdatedDays:abnormalFolderSize:abnormalFolderFileNumber:ignoreRelativePathes:checkSparseFile:sparseFileLeastDifferPercentage:sparseFileLeastDifferSize:;
- (id)initWithOutdatedDays:abnormalFolderSize:abnormalFolderFileNumber:ignoreRelativePathes:checkSparseFile:sparseFileLeastDifferPercentage:sparseFileLeastDifferSize:minCollectSize:visitors:;
- (id)initWithOutdatedDays:abnormalFolderSize:abnormalFolderFileNumber:ignoreRelativePathes:checkSparseFile:sparseFileLeastDifferPercentage:sparseFileLeastDifferSize:targetFolderPath:minCollectSize:visitors:;
- (id)initWithOutdatedDays:abnormalFolderSize:abnormalFolderFileNumber:ignoreRelativePathes:checkSparseFile:sparseFileLeastDifferPercentage:sparseFileLeastDifferSize:targetFolderPath:minCollectSize:visitors:switchBlock:;
- (id)initWithOutdatedDays:abnormalFolderSize:abnormalFolderFileNumber:ignoreRelativePathes:checkSparseFile:sparseFileLeastDifferPercentage:sparseFileLeastDifferSize:visitors:;
- (BOOL)isAbnormalReturnValue;
- (BOOL)isProcessExit;
- (unsigned long long)minCollectSize;
- (id)outDatedfilesDictionary;
- (double)outdatedDays;
- (void)purifyAndStoreTheIgnorePathes:;
- (long long)recursiveCalculateAtPath:isAbnormal:isOutdated:needCheckIgnorePath:;
- (long long)recursiveCalculateAtPath:isAbnormal:isOutdated:needCheckIgnorePath:depthLevel:;
- (void)setAbnormalFolderFileNumber:;
- (void)setAbnormalFolderSize:;
- (void)setAbnormalFolders:;
- (void)setCheckSparseFile:;
- (void)setCurrenFolderPath:;
- (void)setIgnoredRelativePathes:;
- (void)setIsProcessExit:;
- (void)setMinCollectSize:;
- (void)setOutDatedfilesDictionary:;
- (void)setOutdatedDays:;
- (void)setSparseFileLeastDifferPercentage:;
- (void)setSparseFileLeastDifferSize:;
- (void)setVisitors:;
- (unsigned long long)sparseFileLeastDifferSize;
- (id)switchBlock;
- (id)translateAbsolutePathToRelative:;
- (id)translateRelativePathToAbsolute:;
- (id)visitors;
- (id)init;
- (void)dealloc;
- (void).cxx_destruct;
- (unsigned long long)fileSizeAtPath:;
- (id)initWithFolderPath:;
+ (long long)getFreeDisk300MBlockSizeByStatf;
+ (id)fetchTopSizeFilesAtPath:topRank:;
+ (unsigned long long)folderSizeAtPath:;
+ (unsigned long long)folderSizeAtPath:switchBlock:;
+ (unsigned long long)folderSizeAtPath:visitor:;
+ (unsigned long long)folderSizeAtPath:visitor:switchBlock:;
+ (long long)getDisk300MBBlocksFrom:;
+ (long long)getFreeDisk300MBlockSize;
+ (long long)getFreeDisk300MBlockSizeWithWaitTime:;
+ (unsigned long long)getFreeDiskSpaceByStatf;
+ (double)getFreeDiskSpaceWithWaitTime:;
+ (long long)getRecentCachedFreeDisk300MBlockSize;
+ (double)getRecentCachedFreeDiskSpace;
+ (int)getTotalDiskSizeLevel;
+ (double)getTotalDiskSpace;
+ (void)setFreeDiskSpaceCacheTimeInterval:;
+ (double)getFreeDiskSpace;
@end
