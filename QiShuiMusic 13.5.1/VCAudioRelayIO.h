@interface VCAudioRelayIO : VCObject
@property (nonatomic) r^{tagVCAudioRelayIOContext=^{tagVCAudioFrameFormat}^{tagVCAudioFrameFormat}^?^v^{opaqueVCAudioBufferList}f{tagVCAudioClientControllerTimeInfo=IIBBdIIQ}} micContext;
@property (nonatomic) r^{tagVCAudioRelayIOContext=^{tagVCAudioFrameFormat}^{tagVCAudioFrameFormat}^?^v^{opaqueVCAudioBufferList}f{tagVCAudioClientControllerTimeInfo=IIBBdIIQ}} speakerContext;
@property (nonatomic) BOOL isRunning;
@property (nonatomic) BOOL usePacketThread;
@property (nonatomic) @? startCompletionHandler;
@property (nonatomic) r^{_VCRemoteCodecInfo=Id} remoteCodecInfo;
@property (nonatomic) ^{PacketThread_s=} packetThread;
@property (nonatomic) r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} clientFormat;
@property (nonatomic) r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} relayFormat;
@property (nonatomic) ^? micCallback;
@property (nonatomic) ^v micCallbackContext;
@property (nonatomic) ^{opaqueVCAudioBufferList=} micBuffer;
@property (nonatomic) I micTimestamp;
@property (nonatomic) float micPowerRMS;
@property (nonatomic) ^? speakerCallback;
@property (nonatomic) ^v speakerCallbackContext;
@property (nonatomic) ^{opaqueVCAudioBufferList=} speakerBuffer;
@property (nonatomic) I speakerTimestamp;
@property (nonatomic) float speakerPowerRMS;
@property (nonatomic) ^? updateRemoteCodecInfoCallback;
@property (nonatomic) ^v updateRemoteCodecInfoContext;
@property (nonatomic) double preferredIODuration;
@property (nonatomic) <VCBasebandCodecNotifications> relay;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (BOOL)isInitialized;
- (id)init;
- (void)dealloc;
- (BOOL)isRunning;
- (id)copyWithZone:;
- (void)setRelay:;
- (id)relay;
- (void)didUpdateBasebandCodec:;
- (void)printStreamFormats;
- (void)pushAudioSamples:;
- (void)pullAudioSamples:;
- (id)initWithMicContext:speakerContext:;
- (void)initializeFormatContextPointers;
- (BOOL)isEqualToRelayIO:;
- (id)remoteCodecInfo;
- (void)setRemoteCodecInfo:;
- (void)createBuffersForIOContext:;
- (void)createAudioBuffers;
- (id)micContext;
- (id)speakerContext;
- (id)clientFormat;
- (void)setClientFormat:;
- (id)relayFormat;
- (id)micCallback;
- (void)setMicCallback:;
- (id)micCallbackContext;
- (void)setMicCallbackContext:;
- (id)speakerCallback;
- (void)setSpeakerCallback:;
- (id)speakerCallbackContext;
- (void)setSpeakerCallbackContext:;
- (double)preferredIODuration;
- (void)internalPushAudioSamples:;
- (BOOL)createPacketThreadWithIOBufferDuration:name:error:;
- (void)destroyPacketThread;
- (void)createRecordingsWithName:;
- (void)closeRecordings;
- (id)micBuffer;
- (unsigned int)micTimestamp;
- (void)setMicTimestamp:;
- (float)micPowerRMS;
- (void)setMicPowerRMS:;
- (id)speakerBuffer;
- (unsigned int)speakerTimestamp;
- (void)setSpeakerTimestamp:;
- (float)speakerPowerRMS;
- (void)setSpeakerPowerRMS:;
- (id)startCompletionHandler;
- (void)setStartCompletionHandler:;
- (BOOL)usePacketThread;
- (void)setUsePacketThread:;
- (id)packetThread;
- (id)updateRemoteCodecInfoCallback;
- (void)setUpdateRemoteCodecInfoCallback:;
- (id)updateRemoteCodecInfoContext;
- (void)setUpdateRemoteCodecInfoContext:;
@end
