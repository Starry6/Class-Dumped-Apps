@interface RPStreamSession : NSObject
@property (nonatomic) NSString destinationString;
@property (nonatomic) NSUUID nwClientID;
@property (nonatomic) NSData pskData;
@property (nonatomic) BOOL serverMode;
@property (nonatomic) @? streamAcceptHandler;
@property (nonatomic) NSData streamKey;
@property (nonatomic) NSInteger streamSocket;
@property (nonatomic) Q delegatedProcessUPID;
@property (nonatomic) @? disconnectHandler;
@property (nonatomic) NSObject<OS_dispatch_queue> dispatchQueue;
@property (nonatomic) @? flowControlWriteChangedHandler;
@property (nonatomic) NSInteger flowControlWriteState;
@property (nonatomic) @? invalidationHandler;
@property (nonatomic) <RPMessageable> messenger;
@property (nonatomic) @? receivedEventHandler;
@property (nonatomic) @? receivedRequestHandler;
@property (nonatomic) @? connectionReadyHandler;
@property (nonatomic) NSString serviceType;
@property (nonatomic) @? statusChangedHandler;
@property (nonatomic) Q statusFlags;
@property (nonatomic) I streamFlags;
@property (nonatomic) NSString streamID;
@property (nonatomic) NSInteger streamType;
@property (nonatomic) NSInteger streamQoS;
@property (nonatomic) I trafficFlags;
@property (nonatomic) NSString trafficSessionID;
- (id)init;
- (void)setReceivedRequestHandler:;
- (void)dealloc;
- (id)descriptionWithLevel:;
- (void)_invalidated;
- (id)dispatchQueue;
- (id)serviceType;
- (void)setDispatchQueue:;
- (void)setServiceType:;
- (id)initWithCoder:;
- (id)receivedRequestHandler;
- (void)activateWithCompletion:;
- (void)encodeWithCoder:;
- (void)_invalidate;
- (void)setStatusChangedHandler:;
- (id)statusChangedHandler;
- (void).cxx_destruct;
- (id)invalidationHandler;
- (void)setInvalidationHandler:;
- (id)description;
- (unsigned long long)statusFlags;
- (int)streamType;
- (id)streamID;
- (id)messenger;
- (void)invalidate;
- (void)prepareWithCompletion:;
- (id)destinationString;
- (void)sendEventID:event:options:completion:;
- (void)sendRequestID:request:options:responseHandler:;
- (unsigned int)trafficFlags;
- (void)setTrafficFlags:;
- (void)_updateTrafficRegistration;
- (void)setDestinationString:;
- (void)setStreamID:;
- (void)setMessenger:;
- (BOOL)serverMode;
- (void)setServerMode:;
- (void)setPskData:;
- (id)disconnectHandler;
- (void)setDisconnectHandler:;
- (void)setStreamType:;
- (int)flowControlWriteState;
- (id)flowControlWriteChangedHandler;
- (void)setFlowControlWriteChangedHandler:;
- (id)pskData;
- (id)receivedEventHandler;
- (void)setReceivedEventHandler:;
- (id)streamAcceptHandler;
- (void)setStreamAcceptHandler:;
- (unsigned int)streamFlags;
- (void)setStreamFlags:;
- (int)streamQoS;
- (void)setStreamQoS:;
- (void)setStreamQoSOnSocket:;
- (void)acceptedByServer;
- (void)activateForServerRequest:options:responseHandler:;
- (void)startServerConnectionWithCompletion:;
- (BOOL)_startServerConnectionAndReturnError:;
- (void)_clientUDPNWPathStartWithCompletion:;
- (void)_clientUDPNWPathNextWithEndpoint:nwInterface:selfMACData:usb:completion:;
- (void)_clientUDPNWPathStartResponse:options:localEndpoint:nwInterface:selfIPString:usb:completion:;
- (void)_serverUDPNWPathStartRequest:options:responseHandler:;
- (void)_serverUDPNWPathNextWithEndpoint:nwInterface:selfMACData:peerIP:peerMACData:usb:responseHandler:;
- (void)_clientUDPSocketStartWithCompletion:;
- (void)_clientUDPSocketStartResponse:options:completion:;
- (void)_serverUDPSocketStartRequest:options:responseHandler:;
- (void)_clientRPConnectionPrepareWithCompletion:;
- (void)_clientRPConnectionPrepareResponse:options:completion:;
- (void)_clientRPConnectionStartWithCompletion:;
- (void)_serverRPConnectionStartRequest:options:responseHandler:;
- (void)_serverRPConnectionHandleConnectionAccepted:;
- (void)_serverRPConnectionHandleConnectionStarted:;
- (unsigned int)_getSockAddrInterfaceType:;
- (id)_lowLatencySelfAddressString:;
- (void)_updateTrafficRegistrationForIP:;
- (void)_updateTrafficRegistrationForDestination:;
- (unsigned long long)delegatedProcessUPID;
- (void)setDelegatedProcessUPID:;
- (id)nwClientID;
- (void)setNwClientID:;
- (id)connectionReadyHandler;
- (void)setConnectionReadyHandler:;
- (id)streamKey;
- (void)setStreamKey:;
- (int)streamSocket;
- (void)setStreamSocket:;
- (id)trafficSessionID;
- (void)setTrafficSessionID:;
+ (BOOL)supportsSecureCoding;
@end
