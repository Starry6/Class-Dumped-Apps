@interface LSGLContext : NSObject
@property (nonatomic) ^{__CVOpenGLESTextureCache=} gcoreVideoTextureCache;
@property (nonatomic) BOOL useES3;
@property (nonatomic) NSObject<OS_dispatch_queue> contextQueue;
@property (nonatomic) LSGLProgram currentShaderProgram;
@property (nonatomic) EAGLContext context;
@property (nonatomic) ^{__CVOpenGLESTextureCache=} coreVideoTextureCache;
@property (nonatomic) LSGLFramebufferCache framebufferCache;
@property (nonatomic) NSMutableArray effectHandleTrash;
@property (nonatomic) float enableMipmapRatio;
@property (nonatomic) BOOL isActive;
@property (nonatomic) BOOL enablePreviewOpaqueCorrect;
@property (nonatomic) BOOL adaptEffectRenderMsgTypeResource;
@property (nonatomic) BOOL videoOptSwitch;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (BOOL)adaptEffectRenderMsgTypeResource;
- (id)contextQueue;
- (id)coreVideoTextureCache;
- (id)currentShaderProgram;
- (id)effectHandleTrash;
- (float)enableMipmapRatio;
- (BOOL)enablePreviewOpaqueCorrect;
- (id)framebufferCache;
- (id)gcoreVideoTextureCache;
- (id)initWithES3:;
- (id)initWithQueueName:withES3:;
- (void)presentBufferForDisplay;
- (id)programForVertexShaderString:fragmentShaderString:;
- (void)resetContext:;
- (void)setAdaptEffectRenderMsgTypeResource:;
- (void)setContextShaderProgram:;
- (void)setCurrentShaderProgram:;
- (void)setEffectHandleTrash:;
- (void)setEnableMipmapRatio:;
- (void)setEnablePreviewOpaqueCorrect:;
- (void)setGcoreVideoTextureCache:;
- (void)setUseES3:;
- (void)setVideoOptSwitch:;
- (void)useAsCurrentContext;
- (BOOL)useES3;
- (void)useSharegroup:;
- (BOOL)videoOptSwitch;
- (id)init;
- (void)dealloc;
- (id)createContext;
- (id)context;
- (void)setIsActive:;
- (id)initWithConfig:;
- (void).cxx_destruct;
- (BOOL)isActive;
- (void)resetContext;
- (id)contextKey;
+ (int)maximumTextureSizeForThisDevice;
+ (BOOL)deviceSupportsFramebufferReads;
+ (BOOL)deviceSupportsOpenGLESExtension:;
+ (BOOL)deviceSupportsRedTextures;
+ (int)maximumTextureUnitsForThisDevice;
+ (int)maximumVaryingVectorsForThisDevice;
+ (void)releaseContext;
+ (void)setActiveShaderProgram:;
+ (id)sharedContextQueue;
+ (id)sharedFramebufferCache;
+ (id)sharedImageProcessingContext;
+ (id)sharedImageProcessingContext:;
+ (id)sizeThatFitsWithinATextureForSize:;
+ (BOOL)supportsFastTextureUpload;
+ (void)useImageProcessingContext;
@end
