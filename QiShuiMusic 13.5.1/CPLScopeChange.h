@interface CPLScopeChange : CPLRecordChange
@property (nonatomic) q scopeType;
@property (nonatomic) CPLLibraryState libraryState;
@property (nonatomic) CPLLibraryInfo libraryInfo;
@property (nonatomic) q busyState;
@property (nonatomic) NSString stagingScopeIdentifier;
@property (nonatomic) Q pullTaskItem;
@property (nonatomic) CPLEngineScope scope;
@property (nonatomic) CPLScopedIdentifier scopedIdentifier;
@property (nonatomic) NSString identifier;
@property (nonatomic) NSDate recordModificationDate;
@property (nonatomic) BOOL disabled;
@property (nonatomic) NSDate disabledDate;
@property (nonatomic) NSDate deleteDate;
@property (nonatomic) CPLAccountFlags accountFlags;
@property (nonatomic) BOOL containerHasBeenWiped;
@property (nonatomic) CPLShare share;
@property (nonatomic) BOOL activated;
@property (nonatomic) NSString title;
- (BOOL)isDisabled;
- (id)scopeIdentifier;
- (void)setScope:;
- (void)setShare:;
- (BOOL)containerHasBeenWiped;
- (id)scope;
- (id)share;
- (id)redactedDescription;
- (long long)busyState;
- (void)setTitle:;
- (id)initWithCoder:;
- (id)libraryState;
- (id)accountFlags;
- (BOOL)isActivated;
- (id)title;
- (long long)scopeType;
- (void).cxx_destruct;
- (id)description;
- (void)setActivated:;
- (void)setLibraryState:;
- (void)setBusyState:;
- (id)copyWithZone:;
- (void)setScopeType:;
- (id)assetCountPerType;
- (id)_scopedIdentifier;
- (void)_setChangeType:;
- (id)initWithScopeIdentifier:type:;
- (id)disabledDate;
- (id)deleteDate;
- (id)_additionalDescription;
- (long long)defaultFlags;
- (void)updateScopeFromScopeChange:direction:didHaveChanges:;
- (BOOL)isScopeChange;
- (BOOL)isLibraryShare;
- (BOOL)needsToSetScopeIdentifier;
- (void)updateScopeIdentifier:;
- (BOOL)shouldAlwaysUpdateScopeInfoWhenPossible;
- (id)libraryInfo;
- (void)setLibraryInfo:;
- (id)stagingScopeIdentifier;
- (void)setStagingScopeIdentifier:;
- (unsigned long long)pullTaskItem;
- (void)setPullTaskItem:;
+ (BOOL)supportsSecureCoding;
+ (id)newDeleteScopeChangeWithScopeIdentifier:type:;
+ (id)newScopeChangeWithScopeIdentifier:type:;
+ (id)descriptionForScopeType:;
+ (id)mappingForScopeTypeDescription;
+ (id)mappingForScopeBusyStateDescription;
+ (id)descriptionForBusyState:;
+ (Class)scopeChangeClassForType:;
+ (BOOL)shouldAutoActivateScopeWithType:;
+ (BOOL)supportsStagingScopeForScopeWithType:;
+ (id)newScopeChangeInferClassWithScopeIdentifier:type:;
+ (id)newScopeChangeWithAutomaticScopeIdentifierForScopeType:;
+ (BOOL)cplShouldIgnorePropertyForEquality:;
@end
