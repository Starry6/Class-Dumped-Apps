@interface AWEIMAudioMessageRecorder : NSObject
@property (nonatomic) Q scene;
@property (nonatomic) NSString oldAudioSessionCategory;
@property (nonatomic) NSURL url;
@property (nonatomic) q audioFormat;
@property (nonatomic) NSTimer updatePowerTimer;
@property (nonatomic) <IESIMPCMAudioTranslatorProtocol> translator;
@property (nonatomic) NSObject<AWEIMAudioRecorderInterface> recorder;
@property (nonatomic) BOOL deleteFileAfterStopFlag;
@property (nonatomic) BOOL overTimeRecordSuccess;
@property (nonatomic) Q status;
@property (nonatomic) float peakPower;
@property (nonatomic) NSMutableArray peakPowerArr;
@property (nonatomic) float averagePower;
@property (nonatomic) NSMutableArray averagePowerArr;
@property (nonatomic) double currentTime;
@property (nonatomic) double lastNotifyTime;
@property (nonatomic) NSDate startRecordingDate;
@property (nonatomic) NSObject<OS_dispatch_queue> queue;
@property (nonatomic) <AWEIMAudioMessageRecorderDelegate> delegate;
@property (nonatomic) double minSecond;
@property (nonatomic) double limitSecond;
@property (nonatomic) double thresholdSecondOfNotification;
@property (nonatomic) BOOL resignActive;
@property (nonatomic) BOOL hasDeleted;
@property (nonatomic) BOOL isInTranslate;
@property (nonatomic) BOOL startTranslateBeforeInit;
@property (nonatomic) double fireTime;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (void)handleDidEnterBackgroundNotification:;
- (void)applicationWillResignActiveNoti:;
- (void)handleAudioSessionInterruptionNotification:;
- (double)minSecond;
- (void)setMinSecond:;
- (void)setAveragePowerArr:;
- (id)averagePowerArr;
- (void)setOverTimeRecordSuccess:;
- (void)setLastNotifyTime:;
- (void)setOldAudioSessionCategory:;
- (BOOL)setAudioCategory:activeAudioSession:;
- (void)audioRecorderDidStartWithError:;
- (void)updatePowerTimerFired:;
- (void)setUpdatePowerTimer:;
- (id)oldAudioSessionCategory;
- (double)p_getRecorderCurrentTime;
- (double)limitSecond;
- (id)updatePowerTimer;
- (void)setDeleteFileAfterStopFlag:;
- (BOOL)deleteFileAfterStopFlag;
- (id)startRecordingDate;
- (id)peakPowerArr;
- (void)p_updateAveragePower:peakPower:;
- (void)setStartRecordingDate:;
- (double)thresholdSecondOfNotification;
- (double)lastNotifyTime;
- (void)setLimitSecond:;
- (void)setThresholdSecondOfNotification:;
- (BOOL)overTimeRecordSuccess;
- (void)setPeakPowerArr:;
- (void)cancelWithAction:;
- (void)stopWithAction:;
- (void)audioRecorderDidFinishRecording:successfully:action:;
- (id)initWithURL:audioFormat:scene:;
- (void)p_trackAudioRecordPerformanceWithType:status:errorCode:isActive:;
- (BOOL)p_disableAsyncToRecordQueue;
- (BOOL)isInTranslate;
- (void)recorderDidStoppedWithResult:action:error:;
- (void)removeRecorder;
- (void)setIsInTranslate:;
- (BOOL)startTranslateBeforeInit;
- (void)setStartTranslateBeforeInit:;
- (id)initWithURL:audioFormat:;
- (float)averagePower;
- (void)setScene:;
- (void)setCurrentTime:;
- (void)setAudioFormat:;
- (void)dealloc;
- (double)fireTime;
- (void)setUrl:;
- (float)peakPower;
- (id)delegate;
- (double)currentTime;
- (void)setStatus:;
- (unsigned long long)scene;
- (void)setQueue:;
- (void)clear;
- (void)record;
- (long long)audioFormat;
- (void).cxx_destruct;
- (unsigned long long)status;
- (id)queue;
- (BOOL)resignActive;
- (void)setDelegate:;
- (void)setRecorder:;
- (id)translator;
- (id)url;
- (void)setTranslator:;
- (id)recorder;
- (void)setFireTime:;
- (void)applicationProtectedDataWillBecomeUnavailable:;
- (BOOL)hasDeleted;
- (void)setHasDeleted:;
- (void)setAveragePower:;
- (void)setResignActive:;
- (void)setPeakPower:;
- (void)audioRecorderEncodeErrorDidOccur:error:;
@end
