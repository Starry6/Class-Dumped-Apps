@interface AWEIMMessageConversation : NSObject
@property (nonatomic) AWEIMUser liveCustomServiceTargetUser;
@property (nonatomic) NSString liveCustomServiceConName;
@property (nonatomic) NSString liveCustomServiceSpUid;
@property (nonatomic) NSString liveCustomServiceSpSecUid;
@property (nonatomic) NSNumber maxRandomInteractiveEmojiMessageGlobalIndex;
@property (nonatomic) NSNumber participantLastUpdateTime;
@property (nonatomic) NSPointerArray oneCardViewModelCache;
@property (nonatomic) AWEIMUrgeGenerateContentMessageViewModel ugc_activeUrgeGenerateContentMessageViewModel;
@property (nonatomic) NSString conversationID;
@property (nonatomic) Q type;
@property (nonatomic) Q status;
@property (nonatomic) NSString peerUserID;
@property (nonatomic) AWEIMUser peerUser;
@property (nonatomic) AWEIMUserViewModel peerUserViewModel;
@property (nonatomic) <IESIMParticipantsDataManagerProtocol> participantDataController;
@property (nonatomic) <IESIMBotsDataManagerProtocol> botsDataController;
@property (nonatomic) AWEIMUser groupOwner;
@property (nonatomic) NSString ownerID;
@property (nonatomic) NSString creatorUid;
@property (nonatomic) NSDate createTime;
@property (nonatomic) BOOL isNameChanged;
@property (nonatomic) BOOL isNameChangedByUser;
@property (nonatomic) BOOL isIconChanged;
@property (nonatomic) BOOL mute;
@property (nonatomic) BOOL stickOnTop;
@property (nonatomic) NSString roomID;
@property (nonatomic) BOOL isFromMessageBaseViewController;
@property (nonatomic) Q participantInitType;
@property (nonatomic) NSHashTable delegates;
@property (nonatomic) NSObject<OS_dispatch_semaphore> delegatesLock;
@property (nonatomic) <IESIMConversationProtocol> con;
@property (nonatomic) NSString peerSecUserID;
@property (nonatomic) BOOL peerUserHasVirtualAvatar;
@property (nonatomic) q unreadCount;
@property (nonatomic) NSString name;
@property (nonatomic) NSString avatar;
@property (nonatomic) Q participantsCount;
@property (nonatomic) BOOL isCurrentUserAParticipant;
@property (nonatomic) BOOL isCurrentGroupBanned;
@property (nonatomic) NSNumber shortID;
@property (nonatomic) NSString notice;
@property (nonatomic) NSString desc;
@property (nonatomic) NSString alias;
@property (nonatomic) NSDictionary upgradeSetting;
@property (nonatomic) q minLimit;
@property (nonatomic) q maxLimit;
@property (nonatomic) q nextLimit;
@property (nonatomic) q currentLimit;
@property (nonatomic) BOOL allowMemberInvite;
@property (nonatomic) BOOL isGroupManagementSettingActive;
@property (nonatomic) BOOL canShowProfile;
@property (nonatomic) BOOL needAudit;
@property (nonatomic) NSString matchString;
@property (nonatomic) NSString lastMessageTypeString;
@property (nonatomic) NSString lastNoticeMessageTypeString;
@property (nonatomic) AWEIMConversationContext componentContext;
@property (nonatomic) NSString groupNumber;
@property (nonatomic) BOOL isAuthorService;
@property (nonatomic) NSString messageIdToScroll;
@property (nonatomic) BOOL shouldShowEngageGroupOwnerLocalGIF;
@property (nonatomic) BOOL showedActiveGroupMembers;
@property (nonatomic) BOOL hasFetchedAuthorFansGroupInfo;
@property (nonatomic) BOOL isTryingToInsertMilestoneCardMsgAsOwner;
@property (nonatomic) AWEIMMessage<AWEIMExchangeMessageProtocol> quoteExchangeMessage;
@property (nonatomic) AWEIMExchangeAnswerMessage originExchangeAnswerMessage;
@property (nonatomic) BOOL hideExchangeEntrance;
@property (nonatomic) NSDictionary feedBtmParams;
@property (nonatomic) double enterTime;
@property (nonatomic) BOOL isInWatchOnceTextModel;
@property (nonatomic) BOOL isInWatchOnceQuickPhotoModel;
@property (nonatomic) BOOL needBlockShare;
@property (nonatomic) Q hash;
@property (nonatomic) # superclass;
@property (nonatomic) NSString description;
@property (nonatomic) NSString debugDescription;
- (id)shortID;
- (id)componentContext;
- (void)setComponentContext:;
- (void)setParticipantsCount:;
- (BOOL)stickOnTop;
- (void)setStickOnTop:;
- (BOOL)isCurrentUserAParticipant;
- (void)setIsCurrentUserAParticipant:;
- (id)peerUser;
- (void)setPeerUser:;
- (id)peerUserID;
- (id)con;
- (id)creatorUid;
- (id)KVCacheVM;
- (id)conversationDataManager;
- (void)setCon:;
- (id)peerSecUserID;
- (id)groupParticipantBizInfoVM;
- (void)setParticipantInitType:;
- (id)initWithConversationID:options:;
- (void)iesim_participantsDataSourceDidUpdate;
- (void)setParticipantLastUpdateTime:;
- (id)initWithConversationIDWithoutParticipantDC:;
- (BOOL)hasFetchedAuthorFansGroupInfo;
- (void)setHasFetchedAuthorFansGroupInfo:;
- (void)refreshPeerUserUseExpireTimeMemoryCache:WithCompletion:;
- (BOOL)isAuthorService;
- (id)participantDataController;
- (void)setLiveCustomServiceTargetUser:;
- (void)setLiveCustomServiceConName:;
- (id)liveCustomServiceConName;
- (id)liveCustomServiceTargetUser;
- (void)setPeerUserID:;
- (id)quoteExchangeMessage;
- (void)setQuoteExchangeMessage:;
- (void)setFeedBtmParams:;
- (void)setCreatorUid:;
- (void)handleErrorResponse:error:completion:;
- (id)botsDataController;
- (void)updateDesc:completion:;
- (BOOL)isNameChanged;
- (void)updateGroupChatName:completion:;
- (void)updateNotice:completion:;
- (void)setMatchString:;
- (void)addParticipantsWithIDs:toConversation:withContext:completion:;
- (BOOL)isFormat;
- (BOOL)isCurrentGroupBanned;
- (void)updateStickOnTop:;
- (void)setSlm_liveMessageAutoPlayManager:;
- (BOOL)aweim_shouldGenerateTopGroupNoticeWithFaceToFaceCreate:;
- (void)refreshLiveCustomServiceTargetUser:secUid:completion:;
- (id)liveCustomServiceSpUid;
- (id)liveCustomServiceSpSecUid;
- (void)addParticipantsWithIDs:toConversation:completion:;
- (long long)currentLimit;
- (void)slm_addLiveViewModel:;
- (void)slm_removeLiveViewModel:;
- (id)slm_liveMessageAutoPlayManager;
- (id)slm_tempCacheLiveViewModels;
- (void)setDelegatesLock:;
- (id)delegatesLock;
- (id)groupOwner;
- (BOOL)isGroupManagementSettingActive;
- (void)deleteParticipantsWithIDs:completion:;
- (void)setIsInWatchOnceTextModel:;
- (void)setIsInWatchOnceQuickPhotoModel:;
- (BOOL)isInWatchOnceTextModel;
- (BOOL)isInWatchOnceQuickPhotoModel;
- (long long)maxLimit;
- (void)setMaxLimit:;
- (void)setParticipantDataController:;
- (void)refreshGroupOwnerUseExpireTimeMemoryCache:WithCompletion:;
- (BOOL)peerUserHasVirtualAvatar;
- (void)setPeerUserHasVirtualAvatar:;
- (void)setMessageIdToScroll:;
- (id)messageIdToScroll;
- (id)maxRandomInteractiveEmojiMessageGlobalIndex;
- (void)registerRandomInteractiveEmojiMessage:;
- (void)logOffRandomInteractiveEmojiMessage:;
- (void)calculateSettingNameActionBarShow;
- (id)lastMessageTypeString;
- (void)setLastMessageTypeString:;
- (BOOL)hideExchangeEntrance;
- (void)setHideExchangeEntrance:;
- (id)originExchangeAnswerMessage;
- (void)setOriginExchangeAnswerMessage:;
- (void)setLastNoticeMessageTypeString:;
- (BOOL)needBlockShare;
- (id)groupNumber;
- (void)setIsFromMessageBaseViewController:;
- (void)setIsAuthorService:;
- (void)setShouldShowEngageGroupOwnerLocalGIF:;
- (void)setShowedActiveGroupMembers:;
- (id)randomInteractiveEmojiMessageGlobalIndexMuteableSet;
- (BOOL)didFirstLoadMessagesFlag;
- (void)setMaxRandomInteractiveEmojiMessageGlobalIndex:;
- (void)__updateMaxRandomInteractiveEmojiMessageGlobalIndex;
- (void)setDidFirstLoadMessagesFlag:;
- (void)giphyMessage_didFirstLoadMessages;
- (id)participantLastUpdateTime;
- (unsigned long long)participantInitType;
- (BOOL)shouldShowEngageGroupOwnerLocalGIF;
- (BOOL)showedActiveGroupMembers;
- (void)p_singleAddKVO;
- (void)p_groupAddKVO;
- (void)p_fetchAllGroupParticipantInfo;
- (BOOL)isFromMessageBaseViewController;
- (void)didFirstLoadMessages;
- (id)p_roomIDFromConversation:;
- (void)p_addConRoomIDKVO;
- (void)p_lockDelegates;
- (void)p_unlockDelegates;
- (void)setGroupOwner:;
- (void)p_addParticipantsWithIDs:toConversation:withContext:onCompletion:;
- (void)deleteParticipantsWithIDs:options:completion:;
- (id)peerUserViewModel;
- (void)setIsNameChanged:;
- (void)setIsNameChangedByUser:;
- (void)setIsIconChanged:;
- (void)p_fetchIMUsersWithUidToSecUidDict:groupOwnerUid:;
- (void)setIsCurrentGroupBanned:;
- (long long)minLimit;
- (void)iesim_botsDataSourceDidUpdate;
- (void)updateEntryGroupQuestion:completion:;
- (void)addParticipantsWithIDs:toConversation:onCompletion:;
- (void)leaveConversationWithCompletion:;
- (void)deleteConversationWithCompletion:;
- (void)exitAndDissolveConversationWithCompletion:;
- (BOOL)allowMemberInvite;
- (BOOL)canShowProfile;
- (void)setBotsDataController:;
- (BOOL)isNameChangedByUser;
- (BOOL)isIconChanged;
- (id)upgradeSetting;
- (void)setUpgradeSetting:;
- (void)setMinLimit:;
- (long long)nextLimit;
- (void)setNextLimit:;
- (BOOL)needAudit;
- (void)setNeedAudit:;
- (id)lastNoticeMessageTypeString;
- (void)setGroupNumber:;
- (BOOL)isTryingToInsertMilestoneCardMsgAsOwner;
- (void)setIsTryingToInsertMilestoneCardMsgAsOwner:;
- (id)feedBtmParams;
- (void)setNeedBlockShare:;
- (void)setPeerUserViewModel:;
- (void)addOneCardViewModel:;
- (id)oneCardViewModelCache;
- (long long)__maxOneCardCacheLimit;
- (void)setOneCardViewModelCache:;
- (id)ugc_urgeMessageViewModels;
- (id)ugc_activeUrgeGenerateContentMessageViewModel;
- (void)setUgc_activeUrgeGenerateContentMessageViewModel:;
- (BOOL)gma_supportThisFeature;
- (void)setGma__supportThisFeature:;
- (long long)unreadCount;
- (id)alias;
- (BOOL)mute;
- (id)roomID;
- (id)createTime;
- (void)dealloc;
- (void)setStatus:;
- (id)serialQueue;
- (id)delegates;
- (void)setDelegates:;
- (void)setMute:;
- (void)addDelegate:;
- (void)setDesc:;
- (void)removeDelegate:;
- (unsigned long long)type;
- (id)desc;
- (id)conversationID;
- (void)setCreateTime:;
- (void)setType:;
- (void).cxx_destruct;
- (void)updateMuteStatus:;
- (unsigned long long)status;
- (void)setRoomID:;
- (void)setName:;
- (id)name;
- (unsigned long long)participantsCount;
- (void)setConversationID:;
- (id)notice;
- (void)setNotice:;
- (id)avatar;
- (void)setAvatar:;
- (id)ownerID;
- (void)setOwnerID:;
- (double)enterTime;
- (void)setEnterTime:;
- (id)matchString;
+ (void)createConversationWithOtherParticipants:type:inInbox:completion:;
+ (void)addBotsWithIDs:toConversation:options:completion:;
+ (id)peerUidOfSingleChatConversationId:;
+ (BOOL)aweim_shouldShowInviteActionBarWithConversationId:secondLimit:memberCount:;
+ (void)addParticipantsWithIDs:toConversation:withContext:completion:;
+ (void)addParticipantsWithIDs:toConversation:completion:;
+ (void)setName:ofConversation:completion:;
+ (id)peerSecUserIdWithConversationId:;
+ (id)identifierKeyWithGroupId:;
+ (BOOL)aweim_shouldShowSettingNameActionBarWithConversationId:limit:;
+ (void)setNotice:ofConversation:completion:;
+ (void)setEntryGroupQuestion:ofConversation:completion:;
+ (void)setDesc:ofConversation:completion:;
+ (void)handleErrorResponse:error:needToast:completion:;
+ (void)exitAndDissolveConversation:options:withCompletion:;
+ (void)handleLeaveAndDissolveGroupErrorResponse:error:completion:;
+ (void)createConversationWithOtherParticipants:type:inInbox:options:completion:;
+ (void)__checkIndentityForCheckMessage:completionBlock:;
+ (id)p_enterFromWithAddContext:;
+ (void)__trackEnterConversationWithCheckMessage:;
+ (void)enterConversation:conversationType:shortID:inbox:options:completion:;
+ (void)deleteBotsWithIDs:fromConversation:options:completion:;
+ (void)setIcon:ofConversation:completion:;
@end
