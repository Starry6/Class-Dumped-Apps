@interface AWEThroughQuestionnaireSmartServiceCore : NSObject
@property (nonatomic) <FurionSmartCommonServiceProtocol> smartCommonService;
@property (nonatomic) q skipTimes;
@property (nonatomic) BOOL isRunning;
@property (nonatomic) BOOL shouldRun;
@property (nonatomic) q lastRunTime;
@property (nonatomic) NSDictionary configMap;
@property (nonatomic) NSSet triggerEvents;
@property (nonatomic) NSDictionary commonEventMap;
@property (nonatomic) NSDictionary reverseCommonEventMap;
@property (nonatomic) q checkQuestionnaireFailedTimes;
@property (nonatomic) q errorTimes;
@property (nonatomic) BOOL hasHappen;
@property (nonatomic) NSString lastTaskId;
@property (nonatomic) NSDictionary cacheQuestionnaireInput;
@property (nonatomic) NSString lastAwemeId;
@property (nonatomic) NSDictionary cacheAwemeInput;
@property (nonatomic) NSArray shownTaskIDs;
@property (nonatomic) NSString sceneName;
@property (nonatomic) NSString modelName;
@property (nonatomic) q runCount;
@property (nonatomic) <AWEStorageServiceKVInterface> kvStorage;
@property (nonatomic) <AWEThroughQuestionnaireSmartServiceCoreDelegate> delegate;
@property (nonatomic) NSString logTag;
@property (nonatomic) BOOL hasSetupObserver;
@property (nonatomic) BOOL isInnerService;
@property (nonatomic) NSString lastHappenQuestionnarieVersion;
@property (nonatomic) AWEAwemeModel lastHappenTargetAweme;
@property (nonatomic) AWEQuestionnaireResponse lastHappenQuestionnarie;
@property (nonatomic) NSString lastHappenTargetAction;
@property (nonatomic) NSString checkSessionId;
@property (nonatomic) NSString lastInInnerAwemeId;
@property (nonatomic) BOOL observerDisabled;
@property (nonatomic) BOOL isOnInner;
- (void)runWithConfigBuilder:completion:;
- (id)kvStorage;
- (void)setConfigMap:;
- (id)configMap;
- (id)lastAwemeId;
- (void)setSmartCommonService:;
- (id)smartCommonService;
- (long long)skipTimes;
- (void)setSkipTimes:;
- (void)onTriggerEvent:params:;
- (double)getCurrentTimeMs;
- (id)initWithDelegate:isInnerService:;
- (void)onEnterInnerWithParams:;
- (void)onLeaveInnerWithParams:;
- (void)shouldIgnoreShow:withModelID:;
- (void)setObserverDisabled:;
- (id)logTag;
- (BOOL)isInnerService;
- (void)setKvStorage:;
- (long long)errorTimes;
- (void)removeCommonEventObservers;
- (id)commonEventMap;
- (void)saveQuestionnaireTaskShown:;
- (id)reverseCommonEventMap;
- (void)triggerQuestionnairePredictWithAction:params:;
- (BOOL)hasQuestionnaireTaskShown:;
- (void)cleanServiceAsNotNeedRun;
- (id)lastTaskId;
- (void)setLastTaskId:;
- (void)setCacheQuestionnaireInput:;
- (id)cacheQuestionnaireInput;
- (void)setLastAwemeId:;
- (void)setCacheAwemeInput:;
- (id)cacheAwemeInput;
- (BOOL)checkQuestionnaire:;
- (long long)checkQuestionnaireFailedTimes;
- (void)setCheckQuestionnaireFailedTimes:;
- (id)getCacheQuestionnaireInput:;
- (id)getCacheAwemeInputWithAwemeModel:itemID:;
- (void)setErrorTimes:;
- (BOOL)hasHappen;
- (void)setHasHappen:;
- (void)setLastHappenQuestionnarieVersion:;
- (void)setLastHappenTargetAweme:;
- (void)setLastHappenQuestionnarie:;
- (void)setLastHappenTargetAction:;
- (void)setRunCount:;
- (void)setShownTaskIDs:;
- (id)getShownTaskIDs;
- (id)lastHappenTargetAweme;
- (id)lastHappenQuestionnarie;
- (id)lastHappenTargetAction;
- (id)lastHappenQuestionnarieVersion;
- (void)setCommonEventMap:;
- (void)setReverseCommonEventMap:;
- (id)shownTaskIDs;
- (void)setIsInnerService:;
- (void)setLogTag:;
- (BOOL)hasSetupObserver;
- (void)setHasSetupObserver:;
- (BOOL)observerDisabled;
- (BOOL)isEnterFromRightWithParams:;
- (void)setIsOnInner:;
- (BOOL)isOnInner;
- (void)setLastInInnerAwemeId:;
- (id)lastInInnerAwemeId;
- (void)setCheckSessionId:;
- (id)checkSessionId;
- (BOOL)ignoreRunWithAction:params:;
- (void)setModelName:;
- (id)sceneName;
- (void)setIsRunning:;
- (id)modelName;
- (id)delegate;
- (BOOL)enabled;
- (long long)lastRunTime;
- (void).cxx_destruct;
- (void)setLastRunTime:;
- (void)setDelegate:;
- (BOOL)isRunning;
- (id)serviceName;
- (void)setShouldRun:;
- (BOOL)shouldRun;
- (void)setSceneName:;
- (void)setupObserver;
- (void)setTriggerEvents:;
- (id)triggerEvents;
- (long long)runCount;
@end
